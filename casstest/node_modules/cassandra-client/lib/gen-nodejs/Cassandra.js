//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./cassandra_types');
//HELPER FUNCTIONS AND STRUCTURES

Cassandra_login_args = function(args) {
  this.auth_request = null;
  if (args) {
    if (args.auth_request !== undefined) {
      this.auth_request = args.auth_request;
    }
  }
};
Cassandra_login_args.prototype = {};
Cassandra_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.auth_request = new ttypes.AuthenticationRequest();
        this.auth_request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_login_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_login_args');
  if (this.auth_request !== null && this.auth_request !== undefined) {
    output.writeFieldBegin('auth_request', Thrift.Type.STRUCT, 1);
    this.auth_request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_login_result = function(args) {
  this.authnx = null;
  this.authzx = null;
  if (args instanceof ttypes.AuthenticationException) {
    this.authnx = args;
    return;
  }
  if (args instanceof ttypes.AuthorizationException) {
    this.authzx = args;
    return;
  }
  if (args) {
    if (args.authnx !== undefined) {
      this.authnx = args.authnx;
    }
    if (args.authzx !== undefined) {
      this.authzx = args.authzx;
    }
  }
};
Cassandra_login_result.prototype = {};
Cassandra_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.authnx = new ttypes.AuthenticationException();
        this.authnx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.authzx = new ttypes.AuthorizationException();
        this.authzx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_login_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_login_result');
  if (this.authnx !== null && this.authnx !== undefined) {
    output.writeFieldBegin('authnx', Thrift.Type.STRUCT, 1);
    this.authnx.write(output);
    output.writeFieldEnd();
  }
  if (this.authzx !== null && this.authzx !== undefined) {
    output.writeFieldBegin('authzx', Thrift.Type.STRUCT, 2);
    this.authzx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_set_keyspace_args = function(args) {
  this.keyspace = null;
  if (args) {
    if (args.keyspace !== undefined) {
      this.keyspace = args.keyspace;
    }
  }
};
Cassandra_set_keyspace_args.prototype = {};
Cassandra_set_keyspace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keyspace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_set_keyspace_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_set_keyspace_args');
  if (this.keyspace !== null && this.keyspace !== undefined) {
    output.writeFieldBegin('keyspace', Thrift.Type.STRING, 1);
    output.writeString(this.keyspace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_set_keyspace_result = function(args) {
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_set_keyspace_result.prototype = {};
Cassandra_set_keyspace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_set_keyspace_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_set_keyspace_result');
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_args = function(args) {
  this.key = null;
  this.column_path = null;
  this.consistency_level = 1;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.column_path !== undefined) {
      this.column_path = args.column_path;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_get_args.prototype = {};
Cassandra_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_path = new ttypes.ColumnPath();
        this.column_path.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.column_path !== null && this.column_path !== undefined) {
    output.writeFieldBegin('column_path', Thrift.Type.STRUCT, 2);
    this.column_path.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 3);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_result = function(args) {
  this.success = null;
  this.ire = null;
  this.nfe = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_get_result.prototype = {};
Cassandra_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ColumnOrSuperColumn();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 2);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 3);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 4);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_slice_args = function(args) {
  this.key = null;
  this.column_parent = null;
  this.predicate = null;
  this.consistency_level = 1;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.column_parent !== undefined) {
      this.column_parent = args.column_parent;
    }
    if (args.predicate !== undefined) {
      this.predicate = args.predicate;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_get_slice_args.prototype = {};
Cassandra_get_slice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_parent = new ttypes.ColumnParent();
        this.column_parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.predicate = new ttypes.SlicePredicate();
        this.predicate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_slice_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_slice_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.column_parent !== null && this.column_parent !== undefined) {
    output.writeFieldBegin('column_parent', Thrift.Type.STRUCT, 2);
    this.column_parent.write(output);
    output.writeFieldEnd();
  }
  if (this.predicate !== null && this.predicate !== undefined) {
    output.writeFieldBegin('predicate', Thrift.Type.STRUCT, 3);
    this.predicate.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 4);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_slice_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_get_slice_result.prototype = {};
Cassandra_get_slice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.success = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = new ttypes.ColumnOrSuperColumn();
          elem222.read(input);
          this.success.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_slice_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_slice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter223 in this.success)
    {
      if (this.success.hasOwnProperty(iter223))
      {
        iter223 = this.success[iter223];
        iter223.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_count_args = function(args) {
  this.key = null;
  this.column_parent = null;
  this.predicate = null;
  this.consistency_level = 1;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.column_parent !== undefined) {
      this.column_parent = args.column_parent;
    }
    if (args.predicate !== undefined) {
      this.predicate = args.predicate;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_get_count_args.prototype = {};
Cassandra_get_count_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_parent = new ttypes.ColumnParent();
        this.column_parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.predicate = new ttypes.SlicePredicate();
        this.predicate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_count_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_count_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.column_parent !== null && this.column_parent !== undefined) {
    output.writeFieldBegin('column_parent', Thrift.Type.STRUCT, 2);
    this.column_parent.write(output);
    output.writeFieldEnd();
  }
  if (this.predicate !== null && this.predicate !== undefined) {
    output.writeFieldBegin('predicate', Thrift.Type.STRUCT, 3);
    this.predicate.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 4);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_count_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_get_count_result.prototype = {};
Cassandra_get_count_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_count_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_count_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_multiget_slice_args = function(args) {
  this.keys = null;
  this.column_parent = null;
  this.predicate = null;
  this.consistency_level = 1;
  if (args) {
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.column_parent !== undefined) {
      this.column_parent = args.column_parent;
    }
    if (args.predicate !== undefined) {
      this.predicate = args.predicate;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_multiget_slice_args.prototype = {};
Cassandra_multiget_slice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.keys = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = input.readBinary();
          this.keys.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_parent = new ttypes.ColumnParent();
        this.column_parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.predicate = new ttypes.SlicePredicate();
        this.predicate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_multiget_slice_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_multiget_slice_args');
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (var iter231 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter231))
      {
        iter231 = this.keys[iter231];
        output.writeString(iter231);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_parent !== null && this.column_parent !== undefined) {
    output.writeFieldBegin('column_parent', Thrift.Type.STRUCT, 2);
    this.column_parent.write(output);
    output.writeFieldEnd();
  }
  if (this.predicate !== null && this.predicate !== undefined) {
    output.writeFieldBegin('predicate', Thrift.Type.STRUCT, 3);
    this.predicate.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 4);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_multiget_slice_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_multiget_slice_result.prototype = {};
Cassandra_multiget_slice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size232 = 0;
        var _rtmp3236;
        this.success = {};
        var _ktype233 = 0;
        var _vtype234 = 0;
        _rtmp3236 = input.readMapBegin();
        _ktype233 = _rtmp3236.ktype;
        _vtype234 = _rtmp3236.vtype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          var key238 = null;
          var val239 = null;
          key238 = input.readBinary();
          var _size240 = 0;
          var _rtmp3244;
          val239 = [];
          var _etype243 = 0;
          _rtmp3244 = input.readListBegin();
          _etype243 = _rtmp3244.etype;
          _size240 = _rtmp3244.size;
          for (var _i245 = 0; _i245 < _size240; ++_i245)
          {
            var elem246 = null;
            elem246 = new ttypes.ColumnOrSuperColumn();
            elem246.read(input);
            val239.push(elem246);
          }
          input.readListEnd();
          this.success[key238] = val239;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_multiget_slice_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_multiget_slice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter247 in this.success)
    {
      if (this.success.hasOwnProperty(kiter247))
      {
        var viter248 = this.success[kiter247];
        output.writeString(kiter247);
        output.writeListBegin(Thrift.Type.STRUCT, viter248.length);
        for (var iter249 in viter248)
        {
          if (viter248.hasOwnProperty(iter249))
          {
            iter249 = viter248[iter249];
            iter249.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_multiget_count_args = function(args) {
  this.keys = null;
  this.column_parent = null;
  this.predicate = null;
  this.consistency_level = 1;
  if (args) {
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
    if (args.column_parent !== undefined) {
      this.column_parent = args.column_parent;
    }
    if (args.predicate !== undefined) {
      this.predicate = args.predicate;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_multiget_count_args.prototype = {};
Cassandra_multiget_count_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size250 = 0;
        var _rtmp3254;
        this.keys = [];
        var _etype253 = 0;
        _rtmp3254 = input.readListBegin();
        _etype253 = _rtmp3254.etype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var elem256 = null;
          elem256 = input.readBinary();
          this.keys.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_parent = new ttypes.ColumnParent();
        this.column_parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.predicate = new ttypes.SlicePredicate();
        this.predicate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_multiget_count_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_multiget_count_args');
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (var iter257 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter257))
      {
        iter257 = this.keys[iter257];
        output.writeString(iter257);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.column_parent !== null && this.column_parent !== undefined) {
    output.writeFieldBegin('column_parent', Thrift.Type.STRUCT, 2);
    this.column_parent.write(output);
    output.writeFieldEnd();
  }
  if (this.predicate !== null && this.predicate !== undefined) {
    output.writeFieldBegin('predicate', Thrift.Type.STRUCT, 3);
    this.predicate.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 4);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_multiget_count_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_multiget_count_result.prototype = {};
Cassandra_multiget_count_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size258 = 0;
        var _rtmp3262;
        this.success = {};
        var _ktype259 = 0;
        var _vtype260 = 0;
        _rtmp3262 = input.readMapBegin();
        _ktype259 = _rtmp3262.ktype;
        _vtype260 = _rtmp3262.vtype;
        _size258 = _rtmp3262.size;
        for (var _i263 = 0; _i263 < _size258; ++_i263)
        {
          var key264 = null;
          var val265 = null;
          key264 = input.readBinary();
          val265 = input.readI32();
          this.success[key264] = val265;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_multiget_count_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_multiget_count_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.success));
    for (var kiter266 in this.success)
    {
      if (this.success.hasOwnProperty(kiter266))
      {
        var viter267 = this.success[kiter266];
        output.writeString(kiter266);
        output.writeI32(viter267);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_range_slices_args = function(args) {
  this.column_parent = null;
  this.predicate = null;
  this.range = null;
  this.consistency_level = 1;
  if (args) {
    if (args.column_parent !== undefined) {
      this.column_parent = args.column_parent;
    }
    if (args.predicate !== undefined) {
      this.predicate = args.predicate;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_get_range_slices_args.prototype = {};
Cassandra_get_range_slices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_parent = new ttypes.ColumnParent();
        this.column_parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.predicate = new ttypes.SlicePredicate();
        this.predicate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.KeyRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_range_slices_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_range_slices_args');
  if (this.column_parent !== null && this.column_parent !== undefined) {
    output.writeFieldBegin('column_parent', Thrift.Type.STRUCT, 1);
    this.column_parent.write(output);
    output.writeFieldEnd();
  }
  if (this.predicate !== null && this.predicate !== undefined) {
    output.writeFieldBegin('predicate', Thrift.Type.STRUCT, 2);
    this.predicate.write(output);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 3);
    this.range.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 4);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_range_slices_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_get_range_slices_result.prototype = {};
Cassandra_get_range_slices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size268 = 0;
        var _rtmp3272;
        this.success = [];
        var _etype271 = 0;
        _rtmp3272 = input.readListBegin();
        _etype271 = _rtmp3272.etype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          var elem274 = null;
          elem274 = new ttypes.KeySlice();
          elem274.read(input);
          this.success.push(elem274);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_range_slices_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_range_slices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter275 in this.success)
    {
      if (this.success.hasOwnProperty(iter275))
      {
        iter275 = this.success[iter275];
        iter275.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_paged_slice_args = function(args) {
  this.column_family = null;
  this.range = null;
  this.start_column = null;
  this.consistency_level = 1;
  if (args) {
    if (args.column_family !== undefined) {
      this.column_family = args.column_family;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    }
    if (args.start_column !== undefined) {
      this.start_column = args.start_column;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_get_paged_slice_args.prototype = {};
Cassandra_get_paged_slice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.KeyRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.start_column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_paged_slice_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_paged_slice_args');
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 1);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 2);
    this.range.write(output);
    output.writeFieldEnd();
  }
  if (this.start_column !== null && this.start_column !== undefined) {
    output.writeFieldBegin('start_column', Thrift.Type.STRING, 3);
    output.writeString(this.start_column);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 4);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_paged_slice_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_get_paged_slice_result.prototype = {};
Cassandra_get_paged_slice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size276 = 0;
        var _rtmp3280;
        this.success = [];
        var _etype279 = 0;
        _rtmp3280 = input.readListBegin();
        _etype279 = _rtmp3280.etype;
        _size276 = _rtmp3280.size;
        for (var _i281 = 0; _i281 < _size276; ++_i281)
        {
          var elem282 = null;
          elem282 = new ttypes.KeySlice();
          elem282.read(input);
          this.success.push(elem282);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_paged_slice_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_paged_slice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter283 in this.success)
    {
      if (this.success.hasOwnProperty(iter283))
      {
        iter283 = this.success[iter283];
        iter283.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_indexed_slices_args = function(args) {
  this.column_parent = null;
  this.index_clause = null;
  this.column_predicate = null;
  this.consistency_level = 1;
  if (args) {
    if (args.column_parent !== undefined) {
      this.column_parent = args.column_parent;
    }
    if (args.index_clause !== undefined) {
      this.index_clause = args.index_clause;
    }
    if (args.column_predicate !== undefined) {
      this.column_predicate = args.column_predicate;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_get_indexed_slices_args.prototype = {};
Cassandra_get_indexed_slices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_parent = new ttypes.ColumnParent();
        this.column_parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.index_clause = new ttypes.IndexClause();
        this.index_clause.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_predicate = new ttypes.SlicePredicate();
        this.column_predicate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_indexed_slices_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_indexed_slices_args');
  if (this.column_parent !== null && this.column_parent !== undefined) {
    output.writeFieldBegin('column_parent', Thrift.Type.STRUCT, 1);
    this.column_parent.write(output);
    output.writeFieldEnd();
  }
  if (this.index_clause !== null && this.index_clause !== undefined) {
    output.writeFieldBegin('index_clause', Thrift.Type.STRUCT, 2);
    this.index_clause.write(output);
    output.writeFieldEnd();
  }
  if (this.column_predicate !== null && this.column_predicate !== undefined) {
    output.writeFieldBegin('column_predicate', Thrift.Type.STRUCT, 3);
    this.column_predicate.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 4);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_get_indexed_slices_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_get_indexed_slices_result.prototype = {};
Cassandra_get_indexed_slices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size284 = 0;
        var _rtmp3288;
        this.success = [];
        var _etype287 = 0;
        _rtmp3288 = input.readListBegin();
        _etype287 = _rtmp3288.etype;
        _size284 = _rtmp3288.size;
        for (var _i289 = 0; _i289 < _size284; ++_i289)
        {
          var elem290 = null;
          elem290 = new ttypes.KeySlice();
          elem290.read(input);
          this.success.push(elem290);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_get_indexed_slices_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_get_indexed_slices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter291 in this.success)
    {
      if (this.success.hasOwnProperty(iter291))
      {
        iter291 = this.success[iter291];
        iter291.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_insert_args = function(args) {
  this.key = null;
  this.column_parent = null;
  this.column = null;
  this.consistency_level = 1;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.column_parent !== undefined) {
      this.column_parent = args.column_parent;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_insert_args.prototype = {};
Cassandra_insert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_parent = new ttypes.ColumnParent();
        this.column_parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.column = new ttypes.Column();
        this.column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_insert_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_insert_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.column_parent !== null && this.column_parent !== undefined) {
    output.writeFieldBegin('column_parent', Thrift.Type.STRUCT, 2);
    this.column_parent.write(output);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRUCT, 3);
    this.column.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 4);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_insert_result = function(args) {
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_insert_result.prototype = {};
Cassandra_insert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_insert_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_insert_result');
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_add_args = function(args) {
  this.key = null;
  this.column_parent = null;
  this.column = null;
  this.consistency_level = 1;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.column_parent !== undefined) {
      this.column_parent = args.column_parent;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_add_args.prototype = {};
Cassandra_add_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_parent = new ttypes.ColumnParent();
        this.column_parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.column = new ttypes.CounterColumn();
        this.column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_add_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_add_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.column_parent !== null && this.column_parent !== undefined) {
    output.writeFieldBegin('column_parent', Thrift.Type.STRUCT, 2);
    this.column_parent.write(output);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRUCT, 3);
    this.column.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 4);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_add_result = function(args) {
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_add_result.prototype = {};
Cassandra_add_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_add_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_add_result');
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_cas_args = function(args) {
  this.key = null;
  this.column_family = null;
  this.expected = null;
  this.updates = null;
  this.serial_consistency_level = 9;
  this.commit_consistency_level = 2;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.column_family !== undefined) {
      this.column_family = args.column_family;
    }
    if (args.expected !== undefined) {
      this.expected = args.expected;
    }
    if (args.updates !== undefined) {
      this.updates = args.updates;
    }
    if (args.serial_consistency_level !== undefined) {
      this.serial_consistency_level = args.serial_consistency_level;
    }
    if (args.commit_consistency_level !== undefined) {
      this.commit_consistency_level = args.commit_consistency_level;
    }
  }
};
Cassandra_cas_args.prototype = {};
Cassandra_cas_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size292 = 0;
        var _rtmp3296;
        this.expected = [];
        var _etype295 = 0;
        _rtmp3296 = input.readListBegin();
        _etype295 = _rtmp3296.etype;
        _size292 = _rtmp3296.size;
        for (var _i297 = 0; _i297 < _size292; ++_i297)
        {
          var elem298 = null;
          elem298 = new ttypes.Column();
          elem298.read(input);
          this.expected.push(elem298);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size299 = 0;
        var _rtmp3303;
        this.updates = [];
        var _etype302 = 0;
        _rtmp3303 = input.readListBegin();
        _etype302 = _rtmp3303.etype;
        _size299 = _rtmp3303.size;
        for (var _i304 = 0; _i304 < _size299; ++_i304)
        {
          var elem305 = null;
          elem305 = new ttypes.Column();
          elem305.read(input);
          this.updates.push(elem305);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.serial_consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.commit_consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_cas_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_cas_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 2);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  if (this.expected !== null && this.expected !== undefined) {
    output.writeFieldBegin('expected', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.expected.length);
    for (var iter306 in this.expected)
    {
      if (this.expected.hasOwnProperty(iter306))
      {
        iter306 = this.expected[iter306];
        iter306.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updates !== null && this.updates !== undefined) {
    output.writeFieldBegin('updates', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.updates.length);
    for (var iter307 in this.updates)
    {
      if (this.updates.hasOwnProperty(iter307))
      {
        iter307 = this.updates[iter307];
        iter307.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.serial_consistency_level !== null && this.serial_consistency_level !== undefined) {
    output.writeFieldBegin('serial_consistency_level', Thrift.Type.I32, 5);
    output.writeI32(this.serial_consistency_level);
    output.writeFieldEnd();
  }
  if (this.commit_consistency_level !== null && this.commit_consistency_level !== undefined) {
    output.writeFieldBegin('commit_consistency_level', Thrift.Type.I32, 6);
    output.writeI32(this.commit_consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_cas_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_cas_result.prototype = {};
Cassandra_cas_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CASResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_cas_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_cas_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_remove_args = function(args) {
  this.key = null;
  this.column_path = null;
  this.timestamp = null;
  this.consistency_level = 1;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.column_path !== undefined) {
      this.column_path = args.column_path;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_remove_args.prototype = {};
Cassandra_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_path = new ttypes.ColumnPath();
        this.column_path.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_remove_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_remove_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.column_path !== null && this.column_path !== undefined) {
    output.writeFieldBegin('column_path', Thrift.Type.STRUCT, 2);
    this.column_path.write(output);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 4);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_remove_result = function(args) {
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_remove_result.prototype = {};
Cassandra_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_remove_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_remove_result');
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_remove_counter_args = function(args) {
  this.key = null;
  this.path = null;
  this.consistency_level = 1;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.path !== undefined) {
      this.path = args.path;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_remove_counter_args.prototype = {};
Cassandra_remove_counter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.path = new ttypes.ColumnPath();
        this.path.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_remove_counter_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_remove_counter_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRUCT, 2);
    this.path.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 3);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_remove_counter_result = function(args) {
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_remove_counter_result.prototype = {};
Cassandra_remove_counter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_remove_counter_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_remove_counter_result');
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_batch_mutate_args = function(args) {
  this.mutation_map = null;
  this.consistency_level = 1;
  if (args) {
    if (args.mutation_map !== undefined) {
      this.mutation_map = args.mutation_map;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_batch_mutate_args.prototype = {};
Cassandra_batch_mutate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size308 = 0;
        var _rtmp3312;
        this.mutation_map = {};
        var _ktype309 = 0;
        var _vtype310 = 0;
        _rtmp3312 = input.readMapBegin();
        _ktype309 = _rtmp3312.ktype;
        _vtype310 = _rtmp3312.vtype;
        _size308 = _rtmp3312.size;
        for (var _i313 = 0; _i313 < _size308; ++_i313)
        {
          var key314 = null;
          var val315 = null;
          key314 = input.readBinary();
          var _size316 = 0;
          var _rtmp3320;
          val315 = {};
          var _ktype317 = 0;
          var _vtype318 = 0;
          _rtmp3320 = input.readMapBegin();
          _ktype317 = _rtmp3320.ktype;
          _vtype318 = _rtmp3320.vtype;
          _size316 = _rtmp3320.size;
          for (var _i321 = 0; _i321 < _size316; ++_i321)
          {
            var key322 = null;
            var val323 = null;
            key322 = input.readString();
            var _size324 = 0;
            var _rtmp3328;
            val323 = [];
            var _etype327 = 0;
            _rtmp3328 = input.readListBegin();
            _etype327 = _rtmp3328.etype;
            _size324 = _rtmp3328.size;
            for (var _i329 = 0; _i329 < _size324; ++_i329)
            {
              var elem330 = null;
              elem330 = new ttypes.Mutation();
              elem330.read(input);
              val323.push(elem330);
            }
            input.readListEnd();
            val315[key322] = val323;
          }
          input.readMapEnd();
          this.mutation_map[key314] = val315;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_batch_mutate_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_batch_mutate_args');
  if (this.mutation_map !== null && this.mutation_map !== undefined) {
    output.writeFieldBegin('mutation_map', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.mutation_map));
    for (var kiter331 in this.mutation_map)
    {
      if (this.mutation_map.hasOwnProperty(kiter331))
      {
        var viter332 = this.mutation_map[kiter331];
        output.writeString(kiter331);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter332));
        for (var kiter333 in viter332)
        {
          if (viter332.hasOwnProperty(kiter333))
          {
            var viter334 = viter332[kiter333];
            output.writeString(kiter333);
            output.writeListBegin(Thrift.Type.STRUCT, viter334.length);
            for (var iter335 in viter334)
            {
              if (viter334.hasOwnProperty(iter335))
              {
                iter335 = viter334[iter335];
                iter335.write(output);
              }
            }
            output.writeListEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 2);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_batch_mutate_result = function(args) {
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_batch_mutate_result.prototype = {};
Cassandra_batch_mutate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_batch_mutate_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_batch_mutate_result');
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_atomic_batch_mutate_args = function(args) {
  this.mutation_map = null;
  this.consistency_level = 1;
  if (args) {
    if (args.mutation_map !== undefined) {
      this.mutation_map = args.mutation_map;
    }
    if (args.consistency_level !== undefined) {
      this.consistency_level = args.consistency_level;
    }
  }
};
Cassandra_atomic_batch_mutate_args.prototype = {};
Cassandra_atomic_batch_mutate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size336 = 0;
        var _rtmp3340;
        this.mutation_map = {};
        var _ktype337 = 0;
        var _vtype338 = 0;
        _rtmp3340 = input.readMapBegin();
        _ktype337 = _rtmp3340.ktype;
        _vtype338 = _rtmp3340.vtype;
        _size336 = _rtmp3340.size;
        for (var _i341 = 0; _i341 < _size336; ++_i341)
        {
          var key342 = null;
          var val343 = null;
          key342 = input.readBinary();
          var _size344 = 0;
          var _rtmp3348;
          val343 = {};
          var _ktype345 = 0;
          var _vtype346 = 0;
          _rtmp3348 = input.readMapBegin();
          _ktype345 = _rtmp3348.ktype;
          _vtype346 = _rtmp3348.vtype;
          _size344 = _rtmp3348.size;
          for (var _i349 = 0; _i349 < _size344; ++_i349)
          {
            var key350 = null;
            var val351 = null;
            key350 = input.readString();
            var _size352 = 0;
            var _rtmp3356;
            val351 = [];
            var _etype355 = 0;
            _rtmp3356 = input.readListBegin();
            _etype355 = _rtmp3356.etype;
            _size352 = _rtmp3356.size;
            for (var _i357 = 0; _i357 < _size352; ++_i357)
            {
              var elem358 = null;
              elem358 = new ttypes.Mutation();
              elem358.read(input);
              val351.push(elem358);
            }
            input.readListEnd();
            val343[key350] = val351;
          }
          input.readMapEnd();
          this.mutation_map[key342] = val343;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.consistency_level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_atomic_batch_mutate_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_atomic_batch_mutate_args');
  if (this.mutation_map !== null && this.mutation_map !== undefined) {
    output.writeFieldBegin('mutation_map', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.mutation_map));
    for (var kiter359 in this.mutation_map)
    {
      if (this.mutation_map.hasOwnProperty(kiter359))
      {
        var viter360 = this.mutation_map[kiter359];
        output.writeString(kiter359);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(viter360));
        for (var kiter361 in viter360)
        {
          if (viter360.hasOwnProperty(kiter361))
          {
            var viter362 = viter360[kiter361];
            output.writeString(kiter361);
            output.writeListBegin(Thrift.Type.STRUCT, viter362.length);
            for (var iter363 in viter362)
            {
              if (viter362.hasOwnProperty(iter363))
              {
                iter363 = viter362[iter363];
                iter363.write(output);
              }
            }
            output.writeListEnd();
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.consistency_level !== null && this.consistency_level !== undefined) {
    output.writeFieldBegin('consistency_level', Thrift.Type.I32, 2);
    output.writeI32(this.consistency_level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_atomic_batch_mutate_result = function(args) {
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_atomic_batch_mutate_result.prototype = {};
Cassandra_atomic_batch_mutate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_atomic_batch_mutate_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_atomic_batch_mutate_result');
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_truncate_args = function(args) {
  this.cfname = null;
  if (args) {
    if (args.cfname !== undefined) {
      this.cfname = args.cfname;
    }
  }
};
Cassandra_truncate_args.prototype = {};
Cassandra_truncate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cfname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_truncate_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_truncate_args');
  if (this.cfname !== null && this.cfname !== undefined) {
    output.writeFieldBegin('cfname', Thrift.Type.STRING, 1);
    output.writeString(this.cfname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_truncate_result = function(args) {
  this.ire = null;
  this.ue = null;
  this.te = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args) {
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
  }
};
Cassandra_truncate_result.prototype = {};
Cassandra_truncate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_truncate_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_truncate_result');
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_schema_versions_args = function(args) {
};
Cassandra_describe_schema_versions_args.prototype = {};
Cassandra_describe_schema_versions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_schema_versions_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_schema_versions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_schema_versions_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_describe_schema_versions_result.prototype = {};
Cassandra_describe_schema_versions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size364 = 0;
        var _rtmp3368;
        this.success = {};
        var _ktype365 = 0;
        var _vtype366 = 0;
        _rtmp3368 = input.readMapBegin();
        _ktype365 = _rtmp3368.ktype;
        _vtype366 = _rtmp3368.vtype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var key370 = null;
          var val371 = null;
          key370 = input.readString();
          var _size372 = 0;
          var _rtmp3376;
          val371 = [];
          var _etype375 = 0;
          _rtmp3376 = input.readListBegin();
          _etype375 = _rtmp3376.etype;
          _size372 = _rtmp3376.size;
          for (var _i377 = 0; _i377 < _size372; ++_i377)
          {
            var elem378 = null;
            elem378 = input.readString();
            val371.push(elem378);
          }
          input.readListEnd();
          this.success[key370] = val371;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_schema_versions_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_schema_versions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter379 in this.success)
    {
      if (this.success.hasOwnProperty(kiter379))
      {
        var viter380 = this.success[kiter379];
        output.writeString(kiter379);
        output.writeListBegin(Thrift.Type.STRING, viter380.length);
        for (var iter381 in viter380)
        {
          if (viter380.hasOwnProperty(iter381))
          {
            iter381 = viter380[iter381];
            output.writeString(iter381);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_keyspaces_args = function(args) {
};
Cassandra_describe_keyspaces_args.prototype = {};
Cassandra_describe_keyspaces_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_keyspaces_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_keyspaces_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_keyspaces_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_describe_keyspaces_result.prototype = {};
Cassandra_describe_keyspaces_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size382 = 0;
        var _rtmp3386;
        this.success = [];
        var _etype385 = 0;
        _rtmp3386 = input.readListBegin();
        _etype385 = _rtmp3386.etype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var elem388 = null;
          elem388 = new ttypes.KsDef();
          elem388.read(input);
          this.success.push(elem388);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_keyspaces_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_keyspaces_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter389 in this.success)
    {
      if (this.success.hasOwnProperty(iter389))
      {
        iter389 = this.success[iter389];
        iter389.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_cluster_name_args = function(args) {
};
Cassandra_describe_cluster_name_args.prototype = {};
Cassandra_describe_cluster_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_cluster_name_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_cluster_name_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_cluster_name_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Cassandra_describe_cluster_name_result.prototype = {};
Cassandra_describe_cluster_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_cluster_name_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_cluster_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_version_args = function(args) {
};
Cassandra_describe_version_args.prototype = {};
Cassandra_describe_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_version_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_version_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_version_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Cassandra_describe_version_result.prototype = {};
Cassandra_describe_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_version_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_version_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_ring_args = function(args) {
  this.keyspace = null;
  if (args) {
    if (args.keyspace !== undefined) {
      this.keyspace = args.keyspace;
    }
  }
};
Cassandra_describe_ring_args.prototype = {};
Cassandra_describe_ring_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keyspace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_ring_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_ring_args');
  if (this.keyspace !== null && this.keyspace !== undefined) {
    output.writeFieldBegin('keyspace', Thrift.Type.STRING, 1);
    output.writeString(this.keyspace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_ring_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_describe_ring_result.prototype = {};
Cassandra_describe_ring_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size390 = 0;
        var _rtmp3394;
        this.success = [];
        var _etype393 = 0;
        _rtmp3394 = input.readListBegin();
        _etype393 = _rtmp3394.etype;
        _size390 = _rtmp3394.size;
        for (var _i395 = 0; _i395 < _size390; ++_i395)
        {
          var elem396 = null;
          elem396 = new ttypes.TokenRange();
          elem396.read(input);
          this.success.push(elem396);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_ring_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_ring_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter397 in this.success)
    {
      if (this.success.hasOwnProperty(iter397))
      {
        iter397 = this.success[iter397];
        iter397.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_local_ring_args = function(args) {
  this.keyspace = null;
  if (args) {
    if (args.keyspace !== undefined) {
      this.keyspace = args.keyspace;
    }
  }
};
Cassandra_describe_local_ring_args.prototype = {};
Cassandra_describe_local_ring_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keyspace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_local_ring_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_local_ring_args');
  if (this.keyspace !== null && this.keyspace !== undefined) {
    output.writeFieldBegin('keyspace', Thrift.Type.STRING, 1);
    output.writeString(this.keyspace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_local_ring_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_describe_local_ring_result.prototype = {};
Cassandra_describe_local_ring_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size398 = 0;
        var _rtmp3402;
        this.success = [];
        var _etype401 = 0;
        _rtmp3402 = input.readListBegin();
        _etype401 = _rtmp3402.etype;
        _size398 = _rtmp3402.size;
        for (var _i403 = 0; _i403 < _size398; ++_i403)
        {
          var elem404 = null;
          elem404 = new ttypes.TokenRange();
          elem404.read(input);
          this.success.push(elem404);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_local_ring_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_local_ring_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter405 in this.success)
    {
      if (this.success.hasOwnProperty(iter405))
      {
        iter405 = this.success[iter405];
        iter405.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_token_map_args = function(args) {
};
Cassandra_describe_token_map_args.prototype = {};
Cassandra_describe_token_map_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_token_map_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_token_map_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_token_map_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_describe_token_map_result.prototype = {};
Cassandra_describe_token_map_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size406 = 0;
        var _rtmp3410;
        this.success = {};
        var _ktype407 = 0;
        var _vtype408 = 0;
        _rtmp3410 = input.readMapBegin();
        _ktype407 = _rtmp3410.ktype;
        _vtype408 = _rtmp3410.vtype;
        _size406 = _rtmp3410.size;
        for (var _i411 = 0; _i411 < _size406; ++_i411)
        {
          var key412 = null;
          var val413 = null;
          key412 = input.readString();
          val413 = input.readString();
          this.success[key412] = val413;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_token_map_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_token_map_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter414 in this.success)
    {
      if (this.success.hasOwnProperty(kiter414))
      {
        var viter415 = this.success[kiter414];
        output.writeString(kiter414);
        output.writeString(viter415);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_partitioner_args = function(args) {
};
Cassandra_describe_partitioner_args.prototype = {};
Cassandra_describe_partitioner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_partitioner_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_partitioner_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_partitioner_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Cassandra_describe_partitioner_result.prototype = {};
Cassandra_describe_partitioner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_partitioner_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_partitioner_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_snitch_args = function(args) {
};
Cassandra_describe_snitch_args.prototype = {};
Cassandra_describe_snitch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_snitch_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_snitch_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_snitch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Cassandra_describe_snitch_result.prototype = {};
Cassandra_describe_snitch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_snitch_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_snitch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_keyspace_args = function(args) {
  this.keyspace = null;
  if (args) {
    if (args.keyspace !== undefined) {
      this.keyspace = args.keyspace;
    }
  }
};
Cassandra_describe_keyspace_args.prototype = {};
Cassandra_describe_keyspace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keyspace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_keyspace_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_keyspace_args');
  if (this.keyspace !== null && this.keyspace !== undefined) {
    output.writeFieldBegin('keyspace', Thrift.Type.STRING, 1);
    output.writeString(this.keyspace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_keyspace_result = function(args) {
  this.success = null;
  this.nfe = null;
  this.ire = null;
  if (args instanceof ttypes.NotFoundException) {
    this.nfe = args;
    return;
  }
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.nfe !== undefined) {
      this.nfe = args.nfe;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_describe_keyspace_result.prototype = {};
Cassandra_describe_keyspace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.KsDef();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nfe = new ttypes.NotFoundException();
        this.nfe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_keyspace_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_keyspace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.nfe !== null && this.nfe !== undefined) {
    output.writeFieldBegin('nfe', Thrift.Type.STRUCT, 1);
    this.nfe.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 2);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_splits_args = function(args) {
  this.cfName = null;
  this.start_token = null;
  this.end_token = null;
  this.keys_per_split = null;
  if (args) {
    if (args.cfName !== undefined) {
      this.cfName = args.cfName;
    }
    if (args.start_token !== undefined) {
      this.start_token = args.start_token;
    }
    if (args.end_token !== undefined) {
      this.end_token = args.end_token;
    }
    if (args.keys_per_split !== undefined) {
      this.keys_per_split = args.keys_per_split;
    }
  }
};
Cassandra_describe_splits_args.prototype = {};
Cassandra_describe_splits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cfName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.start_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.end_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.keys_per_split = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_splits_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_splits_args');
  if (this.cfName !== null && this.cfName !== undefined) {
    output.writeFieldBegin('cfName', Thrift.Type.STRING, 1);
    output.writeString(this.cfName);
    output.writeFieldEnd();
  }
  if (this.start_token !== null && this.start_token !== undefined) {
    output.writeFieldBegin('start_token', Thrift.Type.STRING, 2);
    output.writeString(this.start_token);
    output.writeFieldEnd();
  }
  if (this.end_token !== null && this.end_token !== undefined) {
    output.writeFieldBegin('end_token', Thrift.Type.STRING, 3);
    output.writeString(this.end_token);
    output.writeFieldEnd();
  }
  if (this.keys_per_split !== null && this.keys_per_split !== undefined) {
    output.writeFieldBegin('keys_per_split', Thrift.Type.I32, 4);
    output.writeI32(this.keys_per_split);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_splits_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_describe_splits_result.prototype = {};
Cassandra_describe_splits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size416 = 0;
        var _rtmp3420;
        this.success = [];
        var _etype419 = 0;
        _rtmp3420 = input.readListBegin();
        _etype419 = _rtmp3420.etype;
        _size416 = _rtmp3420.size;
        for (var _i421 = 0; _i421 < _size416; ++_i421)
        {
          var elem422 = null;
          elem422 = input.readString();
          this.success.push(elem422);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_splits_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_splits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter423 in this.success)
    {
      if (this.success.hasOwnProperty(iter423))
      {
        iter423 = this.success[iter423];
        output.writeString(iter423);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_trace_next_query_args = function(args) {
};
Cassandra_trace_next_query_args.prototype = {};
Cassandra_trace_next_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_trace_next_query_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_trace_next_query_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_trace_next_query_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Cassandra_trace_next_query_result.prototype = {};
Cassandra_trace_next_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_trace_next_query_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_trace_next_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_splits_ex_args = function(args) {
  this.cfName = null;
  this.start_token = null;
  this.end_token = null;
  this.keys_per_split = null;
  if (args) {
    if (args.cfName !== undefined) {
      this.cfName = args.cfName;
    }
    if (args.start_token !== undefined) {
      this.start_token = args.start_token;
    }
    if (args.end_token !== undefined) {
      this.end_token = args.end_token;
    }
    if (args.keys_per_split !== undefined) {
      this.keys_per_split = args.keys_per_split;
    }
  }
};
Cassandra_describe_splits_ex_args.prototype = {};
Cassandra_describe_splits_ex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cfName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.start_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.end_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.keys_per_split = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_splits_ex_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_splits_ex_args');
  if (this.cfName !== null && this.cfName !== undefined) {
    output.writeFieldBegin('cfName', Thrift.Type.STRING, 1);
    output.writeString(this.cfName);
    output.writeFieldEnd();
  }
  if (this.start_token !== null && this.start_token !== undefined) {
    output.writeFieldBegin('start_token', Thrift.Type.STRING, 2);
    output.writeString(this.start_token);
    output.writeFieldEnd();
  }
  if (this.end_token !== null && this.end_token !== undefined) {
    output.writeFieldBegin('end_token', Thrift.Type.STRING, 3);
    output.writeString(this.end_token);
    output.writeFieldEnd();
  }
  if (this.keys_per_split !== null && this.keys_per_split !== undefined) {
    output.writeFieldBegin('keys_per_split', Thrift.Type.I32, 4);
    output.writeI32(this.keys_per_split);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_describe_splits_ex_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_describe_splits_ex_result.prototype = {};
Cassandra_describe_splits_ex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size424 = 0;
        var _rtmp3428;
        this.success = [];
        var _etype427 = 0;
        _rtmp3428 = input.readListBegin();
        _etype427 = _rtmp3428.etype;
        _size424 = _rtmp3428.size;
        for (var _i429 = 0; _i429 < _size424; ++_i429)
        {
          var elem430 = null;
          elem430 = new ttypes.CfSplit();
          elem430.read(input);
          this.success.push(elem430);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_describe_splits_ex_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_describe_splits_ex_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter431 in this.success)
    {
      if (this.success.hasOwnProperty(iter431))
      {
        iter431 = this.success[iter431];
        iter431.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_add_column_family_args = function(args) {
  this.cf_def = null;
  if (args) {
    if (args.cf_def !== undefined) {
      this.cf_def = args.cf_def;
    }
  }
};
Cassandra_system_add_column_family_args.prototype = {};
Cassandra_system_add_column_family_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cf_def = new ttypes.CfDef();
        this.cf_def.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_add_column_family_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_add_column_family_args');
  if (this.cf_def !== null && this.cf_def !== undefined) {
    output.writeFieldBegin('cf_def', Thrift.Type.STRUCT, 1);
    this.cf_def.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_add_column_family_result = function(args) {
  this.success = null;
  this.ire = null;
  this.sde = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.SchemaDisagreementException) {
    this.sde = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.sde !== undefined) {
      this.sde = args.sde;
    }
  }
};
Cassandra_system_add_column_family_result.prototype = {};
Cassandra_system_add_column_family_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sde = new ttypes.SchemaDisagreementException();
        this.sde.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_add_column_family_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_add_column_family_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.sde !== null && this.sde !== undefined) {
    output.writeFieldBegin('sde', Thrift.Type.STRUCT, 2);
    this.sde.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_drop_column_family_args = function(args) {
  this.column_family = null;
  if (args) {
    if (args.column_family !== undefined) {
      this.column_family = args.column_family;
    }
  }
};
Cassandra_system_drop_column_family_args.prototype = {};
Cassandra_system_drop_column_family_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_drop_column_family_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_drop_column_family_args');
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 1);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_drop_column_family_result = function(args) {
  this.success = null;
  this.ire = null;
  this.sde = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.SchemaDisagreementException) {
    this.sde = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.sde !== undefined) {
      this.sde = args.sde;
    }
  }
};
Cassandra_system_drop_column_family_result.prototype = {};
Cassandra_system_drop_column_family_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sde = new ttypes.SchemaDisagreementException();
        this.sde.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_drop_column_family_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_drop_column_family_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.sde !== null && this.sde !== undefined) {
    output.writeFieldBegin('sde', Thrift.Type.STRUCT, 2);
    this.sde.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_add_keyspace_args = function(args) {
  this.ks_def = null;
  if (args) {
    if (args.ks_def !== undefined) {
      this.ks_def = args.ks_def;
    }
  }
};
Cassandra_system_add_keyspace_args.prototype = {};
Cassandra_system_add_keyspace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ks_def = new ttypes.KsDef();
        this.ks_def.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_add_keyspace_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_add_keyspace_args');
  if (this.ks_def !== null && this.ks_def !== undefined) {
    output.writeFieldBegin('ks_def', Thrift.Type.STRUCT, 1);
    this.ks_def.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_add_keyspace_result = function(args) {
  this.success = null;
  this.ire = null;
  this.sde = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.SchemaDisagreementException) {
    this.sde = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.sde !== undefined) {
      this.sde = args.sde;
    }
  }
};
Cassandra_system_add_keyspace_result.prototype = {};
Cassandra_system_add_keyspace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sde = new ttypes.SchemaDisagreementException();
        this.sde.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_add_keyspace_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_add_keyspace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.sde !== null && this.sde !== undefined) {
    output.writeFieldBegin('sde', Thrift.Type.STRUCT, 2);
    this.sde.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_drop_keyspace_args = function(args) {
  this.keyspace = null;
  if (args) {
    if (args.keyspace !== undefined) {
      this.keyspace = args.keyspace;
    }
  }
};
Cassandra_system_drop_keyspace_args.prototype = {};
Cassandra_system_drop_keyspace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keyspace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_drop_keyspace_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_drop_keyspace_args');
  if (this.keyspace !== null && this.keyspace !== undefined) {
    output.writeFieldBegin('keyspace', Thrift.Type.STRING, 1);
    output.writeString(this.keyspace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_drop_keyspace_result = function(args) {
  this.success = null;
  this.ire = null;
  this.sde = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.SchemaDisagreementException) {
    this.sde = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.sde !== undefined) {
      this.sde = args.sde;
    }
  }
};
Cassandra_system_drop_keyspace_result.prototype = {};
Cassandra_system_drop_keyspace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sde = new ttypes.SchemaDisagreementException();
        this.sde.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_drop_keyspace_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_drop_keyspace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.sde !== null && this.sde !== undefined) {
    output.writeFieldBegin('sde', Thrift.Type.STRUCT, 2);
    this.sde.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_update_keyspace_args = function(args) {
  this.ks_def = null;
  if (args) {
    if (args.ks_def !== undefined) {
      this.ks_def = args.ks_def;
    }
  }
};
Cassandra_system_update_keyspace_args.prototype = {};
Cassandra_system_update_keyspace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ks_def = new ttypes.KsDef();
        this.ks_def.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_update_keyspace_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_update_keyspace_args');
  if (this.ks_def !== null && this.ks_def !== undefined) {
    output.writeFieldBegin('ks_def', Thrift.Type.STRUCT, 1);
    this.ks_def.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_update_keyspace_result = function(args) {
  this.success = null;
  this.ire = null;
  this.sde = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.SchemaDisagreementException) {
    this.sde = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.sde !== undefined) {
      this.sde = args.sde;
    }
  }
};
Cassandra_system_update_keyspace_result.prototype = {};
Cassandra_system_update_keyspace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sde = new ttypes.SchemaDisagreementException();
        this.sde.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_update_keyspace_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_update_keyspace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.sde !== null && this.sde !== undefined) {
    output.writeFieldBegin('sde', Thrift.Type.STRUCT, 2);
    this.sde.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_update_column_family_args = function(args) {
  this.cf_def = null;
  if (args) {
    if (args.cf_def !== undefined) {
      this.cf_def = args.cf_def;
    }
  }
};
Cassandra_system_update_column_family_args.prototype = {};
Cassandra_system_update_column_family_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cf_def = new ttypes.CfDef();
        this.cf_def.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_update_column_family_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_update_column_family_args');
  if (this.cf_def !== null && this.cf_def !== undefined) {
    output.writeFieldBegin('cf_def', Thrift.Type.STRUCT, 1);
    this.cf_def.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_system_update_column_family_result = function(args) {
  this.success = null;
  this.ire = null;
  this.sde = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.SchemaDisagreementException) {
    this.sde = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.sde !== undefined) {
      this.sde = args.sde;
    }
  }
};
Cassandra_system_update_column_family_result.prototype = {};
Cassandra_system_update_column_family_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sde = new ttypes.SchemaDisagreementException();
        this.sde.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_system_update_column_family_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_system_update_column_family_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.sde !== null && this.sde !== undefined) {
    output.writeFieldBegin('sde', Thrift.Type.STRUCT, 2);
    this.sde.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_execute_cql_query_args = function(args) {
  this.query = null;
  this.compression = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.compression !== undefined) {
      this.compression = args.compression;
    }
  }
};
Cassandra_execute_cql_query_args.prototype = {};
Cassandra_execute_cql_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.compression = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_execute_cql_query_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_execute_cql_query_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.compression !== null && this.compression !== undefined) {
    output.writeFieldBegin('compression', Thrift.Type.I32, 2);
    output.writeI32(this.compression);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_execute_cql_query_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  this.sde = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args instanceof ttypes.SchemaDisagreementException) {
    this.sde = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
    if (args.sde !== undefined) {
      this.sde = args.sde;
    }
  }
};
Cassandra_execute_cql_query_result.prototype = {};
Cassandra_execute_cql_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CqlResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.sde = new ttypes.SchemaDisagreementException();
        this.sde.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_execute_cql_query_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_execute_cql_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  if (this.sde !== null && this.sde !== undefined) {
    output.writeFieldBegin('sde', Thrift.Type.STRUCT, 4);
    this.sde.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_execute_cql3_query_args = function(args) {
  this.query = null;
  this.compression = null;
  this.consistency = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.compression !== undefined) {
      this.compression = args.compression;
    }
    if (args.consistency !== undefined) {
      this.consistency = args.consistency;
    }
  }
};
Cassandra_execute_cql3_query_args.prototype = {};
Cassandra_execute_cql3_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.compression = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.consistency = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_execute_cql3_query_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_execute_cql3_query_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.compression !== null && this.compression !== undefined) {
    output.writeFieldBegin('compression', Thrift.Type.I32, 2);
    output.writeI32(this.compression);
    output.writeFieldEnd();
  }
  if (this.consistency !== null && this.consistency !== undefined) {
    output.writeFieldBegin('consistency', Thrift.Type.I32, 3);
    output.writeI32(this.consistency);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_execute_cql3_query_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  this.sde = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args instanceof ttypes.SchemaDisagreementException) {
    this.sde = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
    if (args.sde !== undefined) {
      this.sde = args.sde;
    }
  }
};
Cassandra_execute_cql3_query_result.prototype = {};
Cassandra_execute_cql3_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CqlResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.sde = new ttypes.SchemaDisagreementException();
        this.sde.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_execute_cql3_query_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_execute_cql3_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  if (this.sde !== null && this.sde !== undefined) {
    output.writeFieldBegin('sde', Thrift.Type.STRUCT, 4);
    this.sde.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_prepare_cql_query_args = function(args) {
  this.query = null;
  this.compression = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.compression !== undefined) {
      this.compression = args.compression;
    }
  }
};
Cassandra_prepare_cql_query_args.prototype = {};
Cassandra_prepare_cql_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.compression = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_prepare_cql_query_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_prepare_cql_query_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.compression !== null && this.compression !== undefined) {
    output.writeFieldBegin('compression', Thrift.Type.I32, 2);
    output.writeI32(this.compression);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_prepare_cql_query_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_prepare_cql_query_result.prototype = {};
Cassandra_prepare_cql_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CqlPreparedResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_prepare_cql_query_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_prepare_cql_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_prepare_cql3_query_args = function(args) {
  this.query = null;
  this.compression = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.compression !== undefined) {
      this.compression = args.compression;
    }
  }
};
Cassandra_prepare_cql3_query_args.prototype = {};
Cassandra_prepare_cql3_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.compression = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_prepare_cql3_query_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_prepare_cql3_query_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.compression !== null && this.compression !== undefined) {
    output.writeFieldBegin('compression', Thrift.Type.I32, 2);
    output.writeI32(this.compression);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_prepare_cql3_query_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_prepare_cql3_query_result.prototype = {};
Cassandra_prepare_cql3_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CqlPreparedResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_prepare_cql3_query_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_prepare_cql3_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_execute_prepared_cql_query_args = function(args) {
  this.itemId = null;
  this.values = null;
  if (args) {
    if (args.itemId !== undefined) {
      this.itemId = args.itemId;
    }
    if (args.values !== undefined) {
      this.values = args.values;
    }
  }
};
Cassandra_execute_prepared_cql_query_args.prototype = {};
Cassandra_execute_prepared_cql_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.itemId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size432 = 0;
        var _rtmp3436;
        this.values = [];
        var _etype435 = 0;
        _rtmp3436 = input.readListBegin();
        _etype435 = _rtmp3436.etype;
        _size432 = _rtmp3436.size;
        for (var _i437 = 0; _i437 < _size432; ++_i437)
        {
          var elem438 = null;
          elem438 = input.readBinary();
          this.values.push(elem438);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_execute_prepared_cql_query_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_execute_prepared_cql_query_args');
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.I32, 1);
    output.writeI32(this.itemId);
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter439 in this.values)
    {
      if (this.values.hasOwnProperty(iter439))
      {
        iter439 = this.values[iter439];
        output.writeString(iter439);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_execute_prepared_cql_query_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  this.sde = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args instanceof ttypes.SchemaDisagreementException) {
    this.sde = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
    if (args.sde !== undefined) {
      this.sde = args.sde;
    }
  }
};
Cassandra_execute_prepared_cql_query_result.prototype = {};
Cassandra_execute_prepared_cql_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CqlResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.sde = new ttypes.SchemaDisagreementException();
        this.sde.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_execute_prepared_cql_query_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_execute_prepared_cql_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  if (this.sde !== null && this.sde !== undefined) {
    output.writeFieldBegin('sde', Thrift.Type.STRUCT, 4);
    this.sde.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_execute_prepared_cql3_query_args = function(args) {
  this.itemId = null;
  this.values = null;
  this.consistency = null;
  if (args) {
    if (args.itemId !== undefined) {
      this.itemId = args.itemId;
    }
    if (args.values !== undefined) {
      this.values = args.values;
    }
    if (args.consistency !== undefined) {
      this.consistency = args.consistency;
    }
  }
};
Cassandra_execute_prepared_cql3_query_args.prototype = {};
Cassandra_execute_prepared_cql3_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.itemId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size440 = 0;
        var _rtmp3444;
        this.values = [];
        var _etype443 = 0;
        _rtmp3444 = input.readListBegin();
        _etype443 = _rtmp3444.etype;
        _size440 = _rtmp3444.size;
        for (var _i445 = 0; _i445 < _size440; ++_i445)
        {
          var elem446 = null;
          elem446 = input.readBinary();
          this.values.push(elem446);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.consistency = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_execute_prepared_cql3_query_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_execute_prepared_cql3_query_args');
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.I32, 1);
    output.writeI32(this.itemId);
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter447 in this.values)
    {
      if (this.values.hasOwnProperty(iter447))
      {
        iter447 = this.values[iter447];
        output.writeString(iter447);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.consistency !== null && this.consistency !== undefined) {
    output.writeFieldBegin('consistency', Thrift.Type.I32, 3);
    output.writeI32(this.consistency);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_execute_prepared_cql3_query_result = function(args) {
  this.success = null;
  this.ire = null;
  this.ue = null;
  this.te = null;
  this.sde = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args instanceof ttypes.UnavailableException) {
    this.ue = args;
    return;
  }
  if (args instanceof ttypes.TimedOutException) {
    this.te = args;
    return;
  }
  if (args instanceof ttypes.SchemaDisagreementException) {
    this.sde = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
    if (args.ue !== undefined) {
      this.ue = args.ue;
    }
    if (args.te !== undefined) {
      this.te = args.te;
    }
    if (args.sde !== undefined) {
      this.sde = args.sde;
    }
  }
};
Cassandra_execute_prepared_cql3_query_result.prototype = {};
Cassandra_execute_prepared_cql3_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CqlResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ue = new ttypes.UnavailableException();
        this.ue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TimedOutException();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.sde = new ttypes.SchemaDisagreementException();
        this.sde.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_execute_prepared_cql3_query_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_execute_prepared_cql3_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  if (this.ue !== null && this.ue !== undefined) {
    output.writeFieldBegin('ue', Thrift.Type.STRUCT, 2);
    this.ue.write(output);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 3);
    this.te.write(output);
    output.writeFieldEnd();
  }
  if (this.sde !== null && this.sde !== undefined) {
    output.writeFieldBegin('sde', Thrift.Type.STRUCT, 4);
    this.sde.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_set_cql_version_args = function(args) {
  this.version = null;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
Cassandra_set_cql_version_args.prototype = {};
Cassandra_set_cql_version_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_set_cql_version_args.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_set_cql_version_args');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cassandra_set_cql_version_result = function(args) {
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.ire !== undefined) {
      this.ire = args.ire;
    }
  }
};
Cassandra_set_cql_version_result.prototype = {};
Cassandra_set_cql_version_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cassandra_set_cql_version_result.prototype.write = function(output) {
  output.writeStructBegin('Cassandra_set_cql_version_result');
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CassandraClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
CassandraClient.prototype = {};
CassandraClient.prototype.login = function(auth_request, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_login(auth_request);
};

CassandraClient.prototype.send_login = function(auth_request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_login_args();
  args.auth_request = auth_request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.authnx) {
    return callback(result.authnx);
  }
  if (null !== result.authzx) {
    return callback(result.authzx);
  }
  callback(null)
};
CassandraClient.prototype.set_keyspace = function(keyspace, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_set_keyspace(keyspace);
};

CassandraClient.prototype.send_set_keyspace = function(keyspace) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_keyspace', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_set_keyspace_args();
  args.keyspace = keyspace;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_set_keyspace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_set_keyspace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  callback(null)
};
CassandraClient.prototype.get = function(key, column_path, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get(key, column_path, consistency_level);
};

CassandraClient.prototype.send_get = function(key, column_path, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_get_args();
  args.key = key;
  args.column_path = column_path;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};
CassandraClient.prototype.get_slice = function(key, column_parent, predicate, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_slice(key, column_parent, predicate, consistency_level);
};

CassandraClient.prototype.send_get_slice = function(key, column_parent, predicate, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_slice', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_get_slice_args();
  args.key = key;
  args.column_parent = column_parent;
  args.predicate = predicate;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_get_slice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_get_slice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_slice failed: unknown result');
};
CassandraClient.prototype.get_count = function(key, column_parent, predicate, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_count(key, column_parent, predicate, consistency_level);
};

CassandraClient.prototype.send_get_count = function(key, column_parent, predicate, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_count', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_get_count_args();
  args.key = key;
  args.column_parent = column_parent;
  args.predicate = predicate;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_get_count = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_get_count_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_count failed: unknown result');
};
CassandraClient.prototype.multiget_slice = function(keys, column_parent, predicate, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_multiget_slice(keys, column_parent, predicate, consistency_level);
};

CassandraClient.prototype.send_multiget_slice = function(keys, column_parent, predicate, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('multiget_slice', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_multiget_slice_args();
  args.keys = keys;
  args.column_parent = column_parent;
  args.predicate = predicate;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_multiget_slice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_multiget_slice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multiget_slice failed: unknown result');
};
CassandraClient.prototype.multiget_count = function(keys, column_parent, predicate, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_multiget_count(keys, column_parent, predicate, consistency_level);
};

CassandraClient.prototype.send_multiget_count = function(keys, column_parent, predicate, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('multiget_count', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_multiget_count_args();
  args.keys = keys;
  args.column_parent = column_parent;
  args.predicate = predicate;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_multiget_count = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_multiget_count_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('multiget_count failed: unknown result');
};
CassandraClient.prototype.get_range_slices = function(column_parent, predicate, range, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_range_slices(column_parent, predicate, range, consistency_level);
};

CassandraClient.prototype.send_get_range_slices = function(column_parent, predicate, range, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_range_slices', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_get_range_slices_args();
  args.column_parent = column_parent;
  args.predicate = predicate;
  args.range = range;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_get_range_slices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_get_range_slices_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_range_slices failed: unknown result');
};
CassandraClient.prototype.get_paged_slice = function(column_family, range, start_column, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_paged_slice(column_family, range, start_column, consistency_level);
};

CassandraClient.prototype.send_get_paged_slice = function(column_family, range, start_column, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_paged_slice', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_get_paged_slice_args();
  args.column_family = column_family;
  args.range = range;
  args.start_column = start_column;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_get_paged_slice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_get_paged_slice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_paged_slice failed: unknown result');
};
CassandraClient.prototype.get_indexed_slices = function(column_parent, index_clause, column_predicate, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_indexed_slices(column_parent, index_clause, column_predicate, consistency_level);
};

CassandraClient.prototype.send_get_indexed_slices = function(column_parent, index_clause, column_predicate, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_indexed_slices', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_get_indexed_slices_args();
  args.column_parent = column_parent;
  args.index_clause = index_clause;
  args.column_predicate = column_predicate;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_get_indexed_slices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_get_indexed_slices_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_indexed_slices failed: unknown result');
};
CassandraClient.prototype.insert = function(key, column_parent, column, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_insert(key, column_parent, column, consistency_level);
};

CassandraClient.prototype.send_insert = function(key, column_parent, column, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('insert', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_insert_args();
  args.key = key;
  args.column_parent = column_parent;
  args.column = column;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_insert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_insert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
CassandraClient.prototype.add = function(key, column_parent, column, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_add(key, column_parent, column, consistency_level);
};

CassandraClient.prototype.send_add = function(key, column_parent, column, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_add_args();
  args.key = key;
  args.column_parent = column_parent;
  args.column = column;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_add = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_add_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
CassandraClient.prototype.cas = function(key, column_family, expected, updates, serial_consistency_level, commit_consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_cas(key, column_family, expected, updates, serial_consistency_level, commit_consistency_level);
};

CassandraClient.prototype.send_cas = function(key, column_family, expected, updates, serial_consistency_level, commit_consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cas', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_cas_args();
  args.key = key;
  args.column_family = column_family;
  args.expected = expected;
  args.updates = updates;
  args.serial_consistency_level = serial_consistency_level;
  args.commit_consistency_level = commit_consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_cas = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_cas_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cas failed: unknown result');
};
CassandraClient.prototype.remove = function(key, column_path, timestamp, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_remove(key, column_path, timestamp, consistency_level);
};

CassandraClient.prototype.send_remove = function(key, column_path, timestamp, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_remove_args();
  args.key = key;
  args.column_path = column_path;
  args.timestamp = timestamp;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_remove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_remove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
CassandraClient.prototype.remove_counter = function(key, path, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_remove_counter(key, path, consistency_level);
};

CassandraClient.prototype.send_remove_counter = function(key, path, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove_counter', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_remove_counter_args();
  args.key = key;
  args.path = path;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_remove_counter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_remove_counter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
CassandraClient.prototype.batch_mutate = function(mutation_map, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_batch_mutate(mutation_map, consistency_level);
};

CassandraClient.prototype.send_batch_mutate = function(mutation_map, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('batch_mutate', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_batch_mutate_args();
  args.mutation_map = mutation_map;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_batch_mutate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_batch_mutate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
CassandraClient.prototype.atomic_batch_mutate = function(mutation_map, consistency_level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_atomic_batch_mutate(mutation_map, consistency_level);
};

CassandraClient.prototype.send_atomic_batch_mutate = function(mutation_map, consistency_level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('atomic_batch_mutate', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_atomic_batch_mutate_args();
  args.mutation_map = mutation_map;
  args.consistency_level = consistency_level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_atomic_batch_mutate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_atomic_batch_mutate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
CassandraClient.prototype.truncate = function(cfname, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_truncate(cfname);
};

CassandraClient.prototype.send_truncate = function(cfname) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('truncate', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_truncate_args();
  args.cfname = cfname;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_truncate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_truncate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  callback(null)
};
CassandraClient.prototype.describe_schema_versions = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_schema_versions();
};

CassandraClient.prototype.send_describe_schema_versions = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_schema_versions', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_schema_versions_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_schema_versions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_schema_versions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_schema_versions failed: unknown result');
};
CassandraClient.prototype.describe_keyspaces = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_keyspaces();
};

CassandraClient.prototype.send_describe_keyspaces = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_keyspaces', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_keyspaces_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_keyspaces = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_keyspaces_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_keyspaces failed: unknown result');
};
CassandraClient.prototype.describe_cluster_name = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_cluster_name();
};

CassandraClient.prototype.send_describe_cluster_name = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_cluster_name', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_cluster_name_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_cluster_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_cluster_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_cluster_name failed: unknown result');
};
CassandraClient.prototype.describe_version = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_version();
};

CassandraClient.prototype.send_describe_version = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_version', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_version_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_version = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_version_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_version failed: unknown result');
};
CassandraClient.prototype.describe_ring = function(keyspace, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_ring(keyspace);
};

CassandraClient.prototype.send_describe_ring = function(keyspace) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_ring', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_ring_args();
  args.keyspace = keyspace;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_ring = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_ring_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_ring failed: unknown result');
};
CassandraClient.prototype.describe_local_ring = function(keyspace, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_local_ring(keyspace);
};

CassandraClient.prototype.send_describe_local_ring = function(keyspace) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_local_ring', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_local_ring_args();
  args.keyspace = keyspace;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_local_ring = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_local_ring_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_local_ring failed: unknown result');
};
CassandraClient.prototype.describe_token_map = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_token_map();
};

CassandraClient.prototype.send_describe_token_map = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_token_map', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_token_map_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_token_map = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_token_map_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_token_map failed: unknown result');
};
CassandraClient.prototype.describe_partitioner = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_partitioner();
};

CassandraClient.prototype.send_describe_partitioner = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_partitioner', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_partitioner_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_partitioner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_partitioner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_partitioner failed: unknown result');
};
CassandraClient.prototype.describe_snitch = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_snitch();
};

CassandraClient.prototype.send_describe_snitch = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_snitch', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_snitch_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_snitch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_snitch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_snitch failed: unknown result');
};
CassandraClient.prototype.describe_keyspace = function(keyspace, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_keyspace(keyspace);
};

CassandraClient.prototype.send_describe_keyspace = function(keyspace) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_keyspace', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_keyspace_args();
  args.keyspace = keyspace;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_keyspace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_keyspace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.nfe) {
    return callback(result.nfe);
  }
  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_keyspace failed: unknown result');
};
CassandraClient.prototype.describe_splits = function(cfName, start_token, end_token, keys_per_split, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_splits(cfName, start_token, end_token, keys_per_split);
};

CassandraClient.prototype.send_describe_splits = function(cfName, start_token, end_token, keys_per_split) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_splits', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_splits_args();
  args.cfName = cfName;
  args.start_token = start_token;
  args.end_token = end_token;
  args.keys_per_split = keys_per_split;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_splits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_splits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_splits failed: unknown result');
};
CassandraClient.prototype.trace_next_query = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_trace_next_query();
};

CassandraClient.prototype.send_trace_next_query = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('trace_next_query', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_trace_next_query_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_trace_next_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_trace_next_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('trace_next_query failed: unknown result');
};
CassandraClient.prototype.describe_splits_ex = function(cfName, start_token, end_token, keys_per_split, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_describe_splits_ex(cfName, start_token, end_token, keys_per_split);
};

CassandraClient.prototype.send_describe_splits_ex = function(cfName, start_token, end_token, keys_per_split) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('describe_splits_ex', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_describe_splits_ex_args();
  args.cfName = cfName;
  args.start_token = start_token;
  args.end_token = end_token;
  args.keys_per_split = keys_per_split;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_describe_splits_ex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_describe_splits_ex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('describe_splits_ex failed: unknown result');
};
CassandraClient.prototype.system_add_column_family = function(cf_def, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_system_add_column_family(cf_def);
};

CassandraClient.prototype.send_system_add_column_family = function(cf_def) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('system_add_column_family', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_system_add_column_family_args();
  args.cf_def = cf_def;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_system_add_column_family = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_system_add_column_family_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.sde) {
    return callback(result.sde);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('system_add_column_family failed: unknown result');
};
CassandraClient.prototype.system_drop_column_family = function(column_family, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_system_drop_column_family(column_family);
};

CassandraClient.prototype.send_system_drop_column_family = function(column_family) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('system_drop_column_family', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_system_drop_column_family_args();
  args.column_family = column_family;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_system_drop_column_family = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_system_drop_column_family_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.sde) {
    return callback(result.sde);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('system_drop_column_family failed: unknown result');
};
CassandraClient.prototype.system_add_keyspace = function(ks_def, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_system_add_keyspace(ks_def);
};

CassandraClient.prototype.send_system_add_keyspace = function(ks_def) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('system_add_keyspace', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_system_add_keyspace_args();
  args.ks_def = ks_def;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_system_add_keyspace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_system_add_keyspace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.sde) {
    return callback(result.sde);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('system_add_keyspace failed: unknown result');
};
CassandraClient.prototype.system_drop_keyspace = function(keyspace, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_system_drop_keyspace(keyspace);
};

CassandraClient.prototype.send_system_drop_keyspace = function(keyspace) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('system_drop_keyspace', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_system_drop_keyspace_args();
  args.keyspace = keyspace;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_system_drop_keyspace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_system_drop_keyspace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.sde) {
    return callback(result.sde);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('system_drop_keyspace failed: unknown result');
};
CassandraClient.prototype.system_update_keyspace = function(ks_def, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_system_update_keyspace(ks_def);
};

CassandraClient.prototype.send_system_update_keyspace = function(ks_def) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('system_update_keyspace', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_system_update_keyspace_args();
  args.ks_def = ks_def;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_system_update_keyspace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_system_update_keyspace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.sde) {
    return callback(result.sde);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('system_update_keyspace failed: unknown result');
};
CassandraClient.prototype.system_update_column_family = function(cf_def, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_system_update_column_family(cf_def);
};

CassandraClient.prototype.send_system_update_column_family = function(cf_def) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('system_update_column_family', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_system_update_column_family_args();
  args.cf_def = cf_def;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_system_update_column_family = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_system_update_column_family_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.sde) {
    return callback(result.sde);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('system_update_column_family failed: unknown result');
};
CassandraClient.prototype.execute_cql_query = function(query, compression, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_execute_cql_query(query, compression);
};

CassandraClient.prototype.send_execute_cql_query = function(query, compression) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('execute_cql_query', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_execute_cql_query_args();
  args.query = query;
  args.compression = compression;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_execute_cql_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_execute_cql_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.sde) {
    return callback(result.sde);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('execute_cql_query failed: unknown result');
};
CassandraClient.prototype.execute_cql3_query = function(query, compression, consistency, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_execute_cql3_query(query, compression, consistency);
};

CassandraClient.prototype.send_execute_cql3_query = function(query, compression, consistency) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('execute_cql3_query', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_execute_cql3_query_args();
  args.query = query;
  args.compression = compression;
  args.consistency = consistency;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_execute_cql3_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_execute_cql3_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.sde) {
    return callback(result.sde);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('execute_cql3_query failed: unknown result');
};
CassandraClient.prototype.prepare_cql_query = function(query, compression, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_prepare_cql_query(query, compression);
};

CassandraClient.prototype.send_prepare_cql_query = function(query, compression) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('prepare_cql_query', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_prepare_cql_query_args();
  args.query = query;
  args.compression = compression;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_prepare_cql_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_prepare_cql_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('prepare_cql_query failed: unknown result');
};
CassandraClient.prototype.prepare_cql3_query = function(query, compression, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_prepare_cql3_query(query, compression);
};

CassandraClient.prototype.send_prepare_cql3_query = function(query, compression) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('prepare_cql3_query', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_prepare_cql3_query_args();
  args.query = query;
  args.compression = compression;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_prepare_cql3_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_prepare_cql3_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('prepare_cql3_query failed: unknown result');
};
CassandraClient.prototype.execute_prepared_cql_query = function(itemId, values, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_execute_prepared_cql_query(itemId, values);
};

CassandraClient.prototype.send_execute_prepared_cql_query = function(itemId, values) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('execute_prepared_cql_query', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_execute_prepared_cql_query_args();
  args.itemId = itemId;
  args.values = values;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_execute_prepared_cql_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_execute_prepared_cql_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.sde) {
    return callback(result.sde);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('execute_prepared_cql_query failed: unknown result');
};
CassandraClient.prototype.execute_prepared_cql3_query = function(itemId, values, consistency, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_execute_prepared_cql3_query(itemId, values, consistency);
};

CassandraClient.prototype.send_execute_prepared_cql3_query = function(itemId, values, consistency) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('execute_prepared_cql3_query', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_execute_prepared_cql3_query_args();
  args.itemId = itemId;
  args.values = values;
  args.consistency = consistency;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_execute_prepared_cql3_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_execute_prepared_cql3_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.ue) {
    return callback(result.ue);
  }
  if (null !== result.te) {
    return callback(result.te);
  }
  if (null !== result.sde) {
    return callback(result.sde);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('execute_prepared_cql3_query failed: unknown result');
};
CassandraClient.prototype.set_cql_version = function(version, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_set_cql_version(version);
};

CassandraClient.prototype.send_set_cql_version = function(version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cql_version', Thrift.MessageType.CALL, this.seqid);
  var args = new Cassandra_set_cql_version_args();
  args.version = version;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CassandraClient.prototype.recv_set_cql_version = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Cassandra_set_cql_version_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  callback(null)
};
CassandraProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
CassandraProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

CassandraProcessor.prototype.process_login = function(seqid, input, output) {
  var args = new Cassandra_login_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.login(args.auth_request, function (err, result) {
    var result = new Cassandra_login_result((err != null ? err : {success: result}));
    output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_set_keyspace = function(seqid, input, output) {
  var args = new Cassandra_set_keyspace_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.set_keyspace(args.keyspace, function (err, result) {
    var result = new Cassandra_set_keyspace_result((err != null ? err : {success: result}));
    output.writeMessageBegin("set_keyspace", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new Cassandra_get_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get(args.key, args.column_path, args.consistency_level, function (err, result) {
    var result = new Cassandra_get_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_get_slice = function(seqid, input, output) {
  var args = new Cassandra_get_slice_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_slice(args.key, args.column_parent, args.predicate, args.consistency_level, function (err, result) {
    var result = new Cassandra_get_slice_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_slice", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_get_count = function(seqid, input, output) {
  var args = new Cassandra_get_count_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_count(args.key, args.column_parent, args.predicate, args.consistency_level, function (err, result) {
    var result = new Cassandra_get_count_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_count", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_multiget_slice = function(seqid, input, output) {
  var args = new Cassandra_multiget_slice_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.multiget_slice(args.keys, args.column_parent, args.predicate, args.consistency_level, function (err, result) {
    var result = new Cassandra_multiget_slice_result((err != null ? err : {success: result}));
    output.writeMessageBegin("multiget_slice", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_multiget_count = function(seqid, input, output) {
  var args = new Cassandra_multiget_count_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.multiget_count(args.keys, args.column_parent, args.predicate, args.consistency_level, function (err, result) {
    var result = new Cassandra_multiget_count_result((err != null ? err : {success: result}));
    output.writeMessageBegin("multiget_count", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_get_range_slices = function(seqid, input, output) {
  var args = new Cassandra_get_range_slices_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_range_slices(args.column_parent, args.predicate, args.range, args.consistency_level, function (err, result) {
    var result = new Cassandra_get_range_slices_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_range_slices", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_get_paged_slice = function(seqid, input, output) {
  var args = new Cassandra_get_paged_slice_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_paged_slice(args.column_family, args.range, args.start_column, args.consistency_level, function (err, result) {
    var result = new Cassandra_get_paged_slice_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_paged_slice", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_get_indexed_slices = function(seqid, input, output) {
  var args = new Cassandra_get_indexed_slices_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_indexed_slices(args.column_parent, args.index_clause, args.column_predicate, args.consistency_level, function (err, result) {
    var result = new Cassandra_get_indexed_slices_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_indexed_slices", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_insert = function(seqid, input, output) {
  var args = new Cassandra_insert_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.insert(args.key, args.column_parent, args.column, args.consistency_level, function (err, result) {
    var result = new Cassandra_insert_result((err != null ? err : {success: result}));
    output.writeMessageBegin("insert", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_add = function(seqid, input, output) {
  var args = new Cassandra_add_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.add(args.key, args.column_parent, args.column, args.consistency_level, function (err, result) {
    var result = new Cassandra_add_result((err != null ? err : {success: result}));
    output.writeMessageBegin("add", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_cas = function(seqid, input, output) {
  var args = new Cassandra_cas_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.cas(args.key, args.column_family, args.expected, args.updates, args.serial_consistency_level, args.commit_consistency_level, function (err, result) {
    var result = new Cassandra_cas_result((err != null ? err : {success: result}));
    output.writeMessageBegin("cas", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_remove = function(seqid, input, output) {
  var args = new Cassandra_remove_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.remove(args.key, args.column_path, args.timestamp, args.consistency_level, function (err, result) {
    var result = new Cassandra_remove_result((err != null ? err : {success: result}));
    output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_remove_counter = function(seqid, input, output) {
  var args = new Cassandra_remove_counter_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.remove_counter(args.key, args.path, args.consistency_level, function (err, result) {
    var result = new Cassandra_remove_counter_result((err != null ? err : {success: result}));
    output.writeMessageBegin("remove_counter", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_batch_mutate = function(seqid, input, output) {
  var args = new Cassandra_batch_mutate_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.batch_mutate(args.mutation_map, args.consistency_level, function (err, result) {
    var result = new Cassandra_batch_mutate_result((err != null ? err : {success: result}));
    output.writeMessageBegin("batch_mutate", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_atomic_batch_mutate = function(seqid, input, output) {
  var args = new Cassandra_atomic_batch_mutate_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.atomic_batch_mutate(args.mutation_map, args.consistency_level, function (err, result) {
    var result = new Cassandra_atomic_batch_mutate_result((err != null ? err : {success: result}));
    output.writeMessageBegin("atomic_batch_mutate", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_truncate = function(seqid, input, output) {
  var args = new Cassandra_truncate_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.truncate(args.cfname, function (err, result) {
    var result = new Cassandra_truncate_result((err != null ? err : {success: result}));
    output.writeMessageBegin("truncate", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_schema_versions = function(seqid, input, output) {
  var args = new Cassandra_describe_schema_versions_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_schema_versions(function (err, result) {
    var result = new Cassandra_describe_schema_versions_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_schema_versions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_keyspaces = function(seqid, input, output) {
  var args = new Cassandra_describe_keyspaces_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_keyspaces(function (err, result) {
    var result = new Cassandra_describe_keyspaces_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_keyspaces", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_cluster_name = function(seqid, input, output) {
  var args = new Cassandra_describe_cluster_name_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_cluster_name(function (err, result) {
    var result = new Cassandra_describe_cluster_name_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_cluster_name", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_version = function(seqid, input, output) {
  var args = new Cassandra_describe_version_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_version(function (err, result) {
    var result = new Cassandra_describe_version_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_version", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_ring = function(seqid, input, output) {
  var args = new Cassandra_describe_ring_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_ring(args.keyspace, function (err, result) {
    var result = new Cassandra_describe_ring_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_ring", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_local_ring = function(seqid, input, output) {
  var args = new Cassandra_describe_local_ring_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_local_ring(args.keyspace, function (err, result) {
    var result = new Cassandra_describe_local_ring_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_local_ring", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_token_map = function(seqid, input, output) {
  var args = new Cassandra_describe_token_map_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_token_map(function (err, result) {
    var result = new Cassandra_describe_token_map_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_token_map", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_partitioner = function(seqid, input, output) {
  var args = new Cassandra_describe_partitioner_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_partitioner(function (err, result) {
    var result = new Cassandra_describe_partitioner_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_partitioner", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_snitch = function(seqid, input, output) {
  var args = new Cassandra_describe_snitch_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_snitch(function (err, result) {
    var result = new Cassandra_describe_snitch_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_snitch", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_keyspace = function(seqid, input, output) {
  var args = new Cassandra_describe_keyspace_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_keyspace(args.keyspace, function (err, result) {
    var result = new Cassandra_describe_keyspace_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_keyspace", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_splits = function(seqid, input, output) {
  var args = new Cassandra_describe_splits_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_splits(args.cfName, args.start_token, args.end_token, args.keys_per_split, function (err, result) {
    var result = new Cassandra_describe_splits_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_splits", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_trace_next_query = function(seqid, input, output) {
  var args = new Cassandra_trace_next_query_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.trace_next_query(function (err, result) {
    var result = new Cassandra_trace_next_query_result((err != null ? err : {success: result}));
    output.writeMessageBegin("trace_next_query", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_describe_splits_ex = function(seqid, input, output) {
  var args = new Cassandra_describe_splits_ex_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.describe_splits_ex(args.cfName, args.start_token, args.end_token, args.keys_per_split, function (err, result) {
    var result = new Cassandra_describe_splits_ex_result((err != null ? err : {success: result}));
    output.writeMessageBegin("describe_splits_ex", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_system_add_column_family = function(seqid, input, output) {
  var args = new Cassandra_system_add_column_family_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.system_add_column_family(args.cf_def, function (err, result) {
    var result = new Cassandra_system_add_column_family_result((err != null ? err : {success: result}));
    output.writeMessageBegin("system_add_column_family", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_system_drop_column_family = function(seqid, input, output) {
  var args = new Cassandra_system_drop_column_family_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.system_drop_column_family(args.column_family, function (err, result) {
    var result = new Cassandra_system_drop_column_family_result((err != null ? err : {success: result}));
    output.writeMessageBegin("system_drop_column_family", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_system_add_keyspace = function(seqid, input, output) {
  var args = new Cassandra_system_add_keyspace_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.system_add_keyspace(args.ks_def, function (err, result) {
    var result = new Cassandra_system_add_keyspace_result((err != null ? err : {success: result}));
    output.writeMessageBegin("system_add_keyspace", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_system_drop_keyspace = function(seqid, input, output) {
  var args = new Cassandra_system_drop_keyspace_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.system_drop_keyspace(args.keyspace, function (err, result) {
    var result = new Cassandra_system_drop_keyspace_result((err != null ? err : {success: result}));
    output.writeMessageBegin("system_drop_keyspace", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_system_update_keyspace = function(seqid, input, output) {
  var args = new Cassandra_system_update_keyspace_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.system_update_keyspace(args.ks_def, function (err, result) {
    var result = new Cassandra_system_update_keyspace_result((err != null ? err : {success: result}));
    output.writeMessageBegin("system_update_keyspace", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_system_update_column_family = function(seqid, input, output) {
  var args = new Cassandra_system_update_column_family_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.system_update_column_family(args.cf_def, function (err, result) {
    var result = new Cassandra_system_update_column_family_result((err != null ? err : {success: result}));
    output.writeMessageBegin("system_update_column_family", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_execute_cql_query = function(seqid, input, output) {
  var args = new Cassandra_execute_cql_query_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.execute_cql_query(args.query, args.compression, function (err, result) {
    var result = new Cassandra_execute_cql_query_result((err != null ? err : {success: result}));
    output.writeMessageBegin("execute_cql_query", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_execute_cql3_query = function(seqid, input, output) {
  var args = new Cassandra_execute_cql3_query_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.execute_cql3_query(args.query, args.compression, args.consistency, function (err, result) {
    var result = new Cassandra_execute_cql3_query_result((err != null ? err : {success: result}));
    output.writeMessageBegin("execute_cql3_query", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_prepare_cql_query = function(seqid, input, output) {
  var args = new Cassandra_prepare_cql_query_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.prepare_cql_query(args.query, args.compression, function (err, result) {
    var result = new Cassandra_prepare_cql_query_result((err != null ? err : {success: result}));
    output.writeMessageBegin("prepare_cql_query", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_prepare_cql3_query = function(seqid, input, output) {
  var args = new Cassandra_prepare_cql3_query_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.prepare_cql3_query(args.query, args.compression, function (err, result) {
    var result = new Cassandra_prepare_cql3_query_result((err != null ? err : {success: result}));
    output.writeMessageBegin("prepare_cql3_query", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_execute_prepared_cql_query = function(seqid, input, output) {
  var args = new Cassandra_execute_prepared_cql_query_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.execute_prepared_cql_query(args.itemId, args.values, function (err, result) {
    var result = new Cassandra_execute_prepared_cql_query_result((err != null ? err : {success: result}));
    output.writeMessageBegin("execute_prepared_cql_query", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_execute_prepared_cql3_query = function(seqid, input, output) {
  var args = new Cassandra_execute_prepared_cql3_query_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.execute_prepared_cql3_query(args.itemId, args.values, args.consistency, function (err, result) {
    var result = new Cassandra_execute_prepared_cql3_query_result((err != null ? err : {success: result}));
    output.writeMessageBegin("execute_prepared_cql3_query", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CassandraProcessor.prototype.process_set_cql_version = function(seqid, input, output) {
  var args = new Cassandra_set_cql_version_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.set_cql_version(args.version, function (err, result) {
    var result = new Cassandra_set_cql_version_result((err != null ? err : {success: result}));
    output.writeMessageBegin("set_cql_version", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

