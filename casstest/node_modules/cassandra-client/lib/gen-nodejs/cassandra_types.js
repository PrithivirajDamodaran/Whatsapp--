//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ttypes.ConsistencyLevel = {
'ONE' : 1,
'QUORUM' : 2,
'LOCAL_QUORUM' : 3,
'EACH_QUORUM' : 4,
'ALL' : 5,
'ANY' : 6,
'TWO' : 7,
'THREE' : 8,
'SERIAL' : 9,
'LOCAL_SERIAL' : 10,
'LOCAL_ONE' : 11
};
ttypes.IndexOperator = {
'EQ' : 0,
'GTE' : 1,
'GT' : 2,
'LTE' : 3,
'LT' : 4
};
ttypes.IndexType = {
'KEYS' : 0,
'CUSTOM' : 1,
'COMPOSITES' : 2
};
ttypes.Compression = {
'GZIP' : 1,
'NONE' : 2
};
ttypes.CqlResultType = {
'ROWS' : 1,
'VOID' : 2,
'INT' : 3
};
Column = module.exports.Column = function(args) {
  this.name = null;
  this.value = null;
  this.timestamp = null;
  this.ttl = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.ttl !== undefined) {
      this.ttl = args.ttl;
    }
  }
};
Column.prototype = {};
Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.ttl = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Column.prototype.write = function(output) {
  output.writeStructBegin('Column');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.ttl !== null && this.ttl !== undefined) {
    output.writeFieldBegin('ttl', Thrift.Type.I32, 4);
    output.writeI32(this.ttl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SuperColumn = module.exports.SuperColumn = function(args) {
  this.name = null;
  this.columns = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
SuperColumn.prototype = {};
SuperColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.columns = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Column();
          elem6.read(input);
          this.columns.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuperColumn.prototype.write = function(output) {
  output.writeStructBegin('SuperColumn');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter7 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter7))
      {
        iter7 = this.columns[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CounterColumn = module.exports.CounterColumn = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
CounterColumn.prototype = {};
CounterColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CounterColumn.prototype.write = function(output) {
  output.writeStructBegin('CounterColumn');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I64, 2);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CounterSuperColumn = module.exports.CounterSuperColumn = function(args) {
  this.name = null;
  this.columns = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
CounterSuperColumn.prototype = {};
CounterSuperColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.columns = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.CounterColumn();
          elem14.read(input);
          this.columns.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CounterSuperColumn.prototype.write = function(output) {
  output.writeStructBegin('CounterSuperColumn');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter15 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter15))
      {
        iter15 = this.columns[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnOrSuperColumn = module.exports.ColumnOrSuperColumn = function(args) {
  this.column = null;
  this.super_column = null;
  this.counter_column = null;
  this.counter_super_column = null;
  if (args) {
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.super_column !== undefined) {
      this.super_column = args.super_column;
    }
    if (args.counter_column !== undefined) {
      this.counter_column = args.counter_column;
    }
    if (args.counter_super_column !== undefined) {
      this.counter_super_column = args.counter_super_column;
    }
  }
};
ColumnOrSuperColumn.prototype = {};
ColumnOrSuperColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.column = new ttypes.Column();
        this.column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.super_column = new ttypes.SuperColumn();
        this.super_column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.counter_column = new ttypes.CounterColumn();
        this.counter_column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.counter_super_column = new ttypes.CounterSuperColumn();
        this.counter_super_column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnOrSuperColumn.prototype.write = function(output) {
  output.writeStructBegin('ColumnOrSuperColumn');
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRUCT, 1);
    this.column.write(output);
    output.writeFieldEnd();
  }
  if (this.super_column !== null && this.super_column !== undefined) {
    output.writeFieldBegin('super_column', Thrift.Type.STRUCT, 2);
    this.super_column.write(output);
    output.writeFieldEnd();
  }
  if (this.counter_column !== null && this.counter_column !== undefined) {
    output.writeFieldBegin('counter_column', Thrift.Type.STRUCT, 3);
    this.counter_column.write(output);
    output.writeFieldEnd();
  }
  if (this.counter_super_column !== null && this.counter_super_column !== undefined) {
    output.writeFieldBegin('counter_super_column', Thrift.Type.STRUCT, 4);
    this.counter_super_column.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotFoundException = module.exports.NotFoundException = function(args) {
  Thrift.TException.call(this, "NotFoundException")
  this.name = "NotFoundException"
};
Thrift.inherits(NotFoundException, Thrift.TException);
NotFoundException.prototype.name = 'NotFoundException';
NotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotFoundException.prototype.write = function(output) {
  output.writeStructBegin('NotFoundException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidRequestException = module.exports.InvalidRequestException = function(args) {
  Thrift.TException.call(this, "InvalidRequestException")
  this.name = "InvalidRequestException"
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidRequestException, Thrift.TException);
InvalidRequestException.prototype.name = 'InvalidRequestException';
InvalidRequestException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidRequestException.prototype.write = function(output) {
  output.writeStructBegin('InvalidRequestException');
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UnavailableException = module.exports.UnavailableException = function(args) {
  Thrift.TException.call(this, "UnavailableException")
  this.name = "UnavailableException"
};
Thrift.inherits(UnavailableException, Thrift.TException);
UnavailableException.prototype.name = 'UnavailableException';
UnavailableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnavailableException.prototype.write = function(output) {
  output.writeStructBegin('UnavailableException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimedOutException = module.exports.TimedOutException = function(args) {
  Thrift.TException.call(this, "TimedOutException")
  this.name = "TimedOutException"
  this.acknowledged_by = null;
  this.acknowledged_by_batchlog = null;
  this.paxos_in_progress = null;
  if (args) {
    if (args.acknowledged_by !== undefined) {
      this.acknowledged_by = args.acknowledged_by;
    }
    if (args.acknowledged_by_batchlog !== undefined) {
      this.acknowledged_by_batchlog = args.acknowledged_by_batchlog;
    }
    if (args.paxos_in_progress !== undefined) {
      this.paxos_in_progress = args.paxos_in_progress;
    }
  }
};
Thrift.inherits(TimedOutException, Thrift.TException);
TimedOutException.prototype.name = 'TimedOutException';
TimedOutException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.acknowledged_by = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.acknowledged_by_batchlog = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.paxos_in_progress = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimedOutException.prototype.write = function(output) {
  output.writeStructBegin('TimedOutException');
  if (this.acknowledged_by !== null && this.acknowledged_by !== undefined) {
    output.writeFieldBegin('acknowledged_by', Thrift.Type.I32, 1);
    output.writeI32(this.acknowledged_by);
    output.writeFieldEnd();
  }
  if (this.acknowledged_by_batchlog !== null && this.acknowledged_by_batchlog !== undefined) {
    output.writeFieldBegin('acknowledged_by_batchlog', Thrift.Type.BOOL, 2);
    output.writeBool(this.acknowledged_by_batchlog);
    output.writeFieldEnd();
  }
  if (this.paxos_in_progress !== null && this.paxos_in_progress !== undefined) {
    output.writeFieldBegin('paxos_in_progress', Thrift.Type.BOOL, 3);
    output.writeBool(this.paxos_in_progress);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationException = module.exports.AuthenticationException = function(args) {
  Thrift.TException.call(this, "AuthenticationException")
  this.name = "AuthenticationException"
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(AuthenticationException, Thrift.TException);
AuthenticationException.prototype.name = 'AuthenticationException';
AuthenticationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationException.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationException');
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthorizationException = module.exports.AuthorizationException = function(args) {
  Thrift.TException.call(this, "AuthorizationException")
  this.name = "AuthorizationException"
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(AuthorizationException, Thrift.TException);
AuthorizationException.prototype.name = 'AuthorizationException';
AuthorizationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthorizationException.prototype.write = function(output) {
  output.writeStructBegin('AuthorizationException');
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchemaDisagreementException = module.exports.SchemaDisagreementException = function(args) {
  Thrift.TException.call(this, "SchemaDisagreementException")
  this.name = "SchemaDisagreementException"
};
Thrift.inherits(SchemaDisagreementException, Thrift.TException);
SchemaDisagreementException.prototype.name = 'SchemaDisagreementException';
SchemaDisagreementException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchemaDisagreementException.prototype.write = function(output) {
  output.writeStructBegin('SchemaDisagreementException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnParent = module.exports.ColumnParent = function(args) {
  this.column_family = null;
  this.super_column = null;
  if (args) {
    if (args.column_family !== undefined) {
      this.column_family = args.column_family;
    }
    if (args.super_column !== undefined) {
      this.super_column = args.super_column;
    }
  }
};
ColumnParent.prototype = {};
ColumnParent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.super_column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnParent.prototype.write = function(output) {
  output.writeStructBegin('ColumnParent');
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 3);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  if (this.super_column !== null && this.super_column !== undefined) {
    output.writeFieldBegin('super_column', Thrift.Type.STRING, 4);
    output.writeString(this.super_column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnPath = module.exports.ColumnPath = function(args) {
  this.column_family = null;
  this.super_column = null;
  this.column = null;
  if (args) {
    if (args.column_family !== undefined) {
      this.column_family = args.column_family;
    }
    if (args.super_column !== undefined) {
      this.super_column = args.super_column;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
  }
};
ColumnPath.prototype = {};
ColumnPath.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.super_column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnPath.prototype.write = function(output) {
  output.writeStructBegin('ColumnPath');
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 3);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  if (this.super_column !== null && this.super_column !== undefined) {
    output.writeFieldBegin('super_column', Thrift.Type.STRING, 4);
    output.writeString(this.super_column);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 5);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SliceRange = module.exports.SliceRange = function(args) {
  this.start = null;
  this.finish = null;
  this.reversed = false;
  this.count = 100;
  if (args) {
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.finish !== undefined) {
      this.finish = args.finish;
    }
    if (args.reversed !== undefined) {
      this.reversed = args.reversed;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
SliceRange.prototype = {};
SliceRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.finish = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.reversed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SliceRange.prototype.write = function(output) {
  output.writeStructBegin('SliceRange');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.STRING, 1);
    output.writeString(this.start);
    output.writeFieldEnd();
  }
  if (this.finish !== null && this.finish !== undefined) {
    output.writeFieldBegin('finish', Thrift.Type.STRING, 2);
    output.writeString(this.finish);
    output.writeFieldEnd();
  }
  if (this.reversed !== null && this.reversed !== undefined) {
    output.writeFieldBegin('reversed', Thrift.Type.BOOL, 3);
    output.writeBool(this.reversed);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SlicePredicate = module.exports.SlicePredicate = function(args) {
  this.column_names = null;
  this.slice_range = null;
  if (args) {
    if (args.column_names !== undefined) {
      this.column_names = args.column_names;
    }
    if (args.slice_range !== undefined) {
      this.slice_range = args.slice_range;
    }
  }
};
SlicePredicate.prototype = {};
SlicePredicate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.column_names = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readBinary();
          this.column_names.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.slice_range = new ttypes.SliceRange();
        this.slice_range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SlicePredicate.prototype.write = function(output) {
  output.writeStructBegin('SlicePredicate');
  if (this.column_names !== null && this.column_names !== undefined) {
    output.writeFieldBegin('column_names', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.column_names.length);
    for (var iter23 in this.column_names)
    {
      if (this.column_names.hasOwnProperty(iter23))
      {
        iter23 = this.column_names[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.slice_range !== null && this.slice_range !== undefined) {
    output.writeFieldBegin('slice_range', Thrift.Type.STRUCT, 2);
    this.slice_range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexExpression = module.exports.IndexExpression = function(args) {
  this.column_name = null;
  this.op = null;
  this.value = null;
  if (args) {
    if (args.column_name !== undefined) {
      this.column_name = args.column_name;
    }
    if (args.op !== undefined) {
      this.op = args.op;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
IndexExpression.prototype = {};
IndexExpression.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.column_name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.op = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexExpression.prototype.write = function(output) {
  output.writeStructBegin('IndexExpression');
  if (this.column_name !== null && this.column_name !== undefined) {
    output.writeFieldBegin('column_name', Thrift.Type.STRING, 1);
    output.writeString(this.column_name);
    output.writeFieldEnd();
  }
  if (this.op !== null && this.op !== undefined) {
    output.writeFieldBegin('op', Thrift.Type.I32, 2);
    output.writeI32(this.op);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexClause = module.exports.IndexClause = function(args) {
  this.expressions = null;
  this.start_key = null;
  this.count = 100;
  if (args) {
    if (args.expressions !== undefined) {
      this.expressions = args.expressions;
    }
    if (args.start_key !== undefined) {
      this.start_key = args.start_key;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
IndexClause.prototype = {};
IndexClause.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.expressions = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.IndexExpression();
          elem30.read(input);
          this.expressions.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.start_key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexClause.prototype.write = function(output) {
  output.writeStructBegin('IndexClause');
  if (this.expressions !== null && this.expressions !== undefined) {
    output.writeFieldBegin('expressions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.expressions.length);
    for (var iter31 in this.expressions)
    {
      if (this.expressions.hasOwnProperty(iter31))
      {
        iter31 = this.expressions[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.start_key !== null && this.start_key !== undefined) {
    output.writeFieldBegin('start_key', Thrift.Type.STRING, 2);
    output.writeString(this.start_key);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyRange = module.exports.KeyRange = function(args) {
  this.start_key = null;
  this.end_key = null;
  this.start_token = null;
  this.end_token = null;
  this.row_filter = null;
  this.count = 100;
  if (args) {
    if (args.start_key !== undefined) {
      this.start_key = args.start_key;
    }
    if (args.end_key !== undefined) {
      this.end_key = args.end_key;
    }
    if (args.start_token !== undefined) {
      this.start_token = args.start_token;
    }
    if (args.end_token !== undefined) {
      this.end_token = args.end_token;
    }
    if (args.row_filter !== undefined) {
      this.row_filter = args.row_filter;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
KeyRange.prototype = {};
KeyRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.end_key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.start_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.end_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.row_filter = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.IndexExpression();
          elem38.read(input);
          this.row_filter.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyRange.prototype.write = function(output) {
  output.writeStructBegin('KeyRange');
  if (this.start_key !== null && this.start_key !== undefined) {
    output.writeFieldBegin('start_key', Thrift.Type.STRING, 1);
    output.writeString(this.start_key);
    output.writeFieldEnd();
  }
  if (this.end_key !== null && this.end_key !== undefined) {
    output.writeFieldBegin('end_key', Thrift.Type.STRING, 2);
    output.writeString(this.end_key);
    output.writeFieldEnd();
  }
  if (this.start_token !== null && this.start_token !== undefined) {
    output.writeFieldBegin('start_token', Thrift.Type.STRING, 3);
    output.writeString(this.start_token);
    output.writeFieldEnd();
  }
  if (this.end_token !== null && this.end_token !== undefined) {
    output.writeFieldBegin('end_token', Thrift.Type.STRING, 4);
    output.writeString(this.end_token);
    output.writeFieldEnd();
  }
  if (this.row_filter !== null && this.row_filter !== undefined) {
    output.writeFieldBegin('row_filter', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_filter.length);
    for (var iter39 in this.row_filter)
    {
      if (this.row_filter.hasOwnProperty(iter39))
      {
        iter39 = this.row_filter[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 5);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeySlice = module.exports.KeySlice = function(args) {
  this.key = null;
  this.columns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
KeySlice.prototype = {};
KeySlice.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.columns = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.ColumnOrSuperColumn();
          elem46.read(input);
          this.columns.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeySlice.prototype.write = function(output) {
  output.writeStructBegin('KeySlice');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter47 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter47))
      {
        iter47 = this.columns[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyCount = module.exports.KeyCount = function(args) {
  this.key = null;
  this.count = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
KeyCount.prototype = {};
KeyCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyCount.prototype.write = function(output) {
  output.writeStructBegin('KeyCount');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Deletion = module.exports.Deletion = function(args) {
  this.timestamp = null;
  this.super_column = null;
  this.predicate = null;
  if (args) {
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.super_column !== undefined) {
      this.super_column = args.super_column;
    }
    if (args.predicate !== undefined) {
      this.predicate = args.predicate;
    }
  }
};
Deletion.prototype = {};
Deletion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.super_column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.predicate = new ttypes.SlicePredicate();
        this.predicate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Deletion.prototype.write = function(output) {
  output.writeStructBegin('Deletion');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.super_column !== null && this.super_column !== undefined) {
    output.writeFieldBegin('super_column', Thrift.Type.STRING, 2);
    output.writeString(this.super_column);
    output.writeFieldEnd();
  }
  if (this.predicate !== null && this.predicate !== undefined) {
    output.writeFieldBegin('predicate', Thrift.Type.STRUCT, 3);
    this.predicate.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mutation = module.exports.Mutation = function(args) {
  this.column_or_supercolumn = null;
  this.deletion = null;
  if (args) {
    if (args.column_or_supercolumn !== undefined) {
      this.column_or_supercolumn = args.column_or_supercolumn;
    }
    if (args.deletion !== undefined) {
      this.deletion = args.deletion;
    }
  }
};
Mutation.prototype = {};
Mutation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_or_supercolumn = new ttypes.ColumnOrSuperColumn();
        this.column_or_supercolumn.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.deletion = new ttypes.Deletion();
        this.deletion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mutation.prototype.write = function(output) {
  output.writeStructBegin('Mutation');
  if (this.column_or_supercolumn !== null && this.column_or_supercolumn !== undefined) {
    output.writeFieldBegin('column_or_supercolumn', Thrift.Type.STRUCT, 1);
    this.column_or_supercolumn.write(output);
    output.writeFieldEnd();
  }
  if (this.deletion !== null && this.deletion !== undefined) {
    output.writeFieldBegin('deletion', Thrift.Type.STRUCT, 2);
    this.deletion.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EndpointDetails = module.exports.EndpointDetails = function(args) {
  this.host = null;
  this.datacenter = null;
  this.rack = null;
  if (args) {
    if (args.host !== undefined) {
      this.host = args.host;
    }
    if (args.datacenter !== undefined) {
      this.datacenter = args.datacenter;
    }
    if (args.rack !== undefined) {
      this.rack = args.rack;
    }
  }
};
EndpointDetails.prototype = {};
EndpointDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.datacenter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rack = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EndpointDetails.prototype.write = function(output) {
  output.writeStructBegin('EndpointDetails');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.datacenter !== null && this.datacenter !== undefined) {
    output.writeFieldBegin('datacenter', Thrift.Type.STRING, 2);
    output.writeString(this.datacenter);
    output.writeFieldEnd();
  }
  if (this.rack !== null && this.rack !== undefined) {
    output.writeFieldBegin('rack', Thrift.Type.STRING, 3);
    output.writeString(this.rack);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CASResult = module.exports.CASResult = function(args) {
  this.success = null;
  this.current_values = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.current_values !== undefined) {
      this.current_values = args.current_values;
    }
  }
};
CASResult.prototype = {};
CASResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.current_values = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.Column();
          elem54.read(input);
          this.current_values.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CASResult.prototype.write = function(output) {
  output.writeStructBegin('CASResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.current_values !== null && this.current_values !== undefined) {
    output.writeFieldBegin('current_values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.current_values.length);
    for (var iter55 in this.current_values)
    {
      if (this.current_values.hasOwnProperty(iter55))
      {
        iter55 = this.current_values[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TokenRange = module.exports.TokenRange = function(args) {
  this.start_token = null;
  this.end_token = null;
  this.endpoints = null;
  this.rpc_endpoints = null;
  this.endpoint_details = null;
  if (args) {
    if (args.start_token !== undefined) {
      this.start_token = args.start_token;
    }
    if (args.end_token !== undefined) {
      this.end_token = args.end_token;
    }
    if (args.endpoints !== undefined) {
      this.endpoints = args.endpoints;
    }
    if (args.rpc_endpoints !== undefined) {
      this.rpc_endpoints = args.rpc_endpoints;
    }
    if (args.endpoint_details !== undefined) {
      this.endpoint_details = args.endpoint_details;
    }
  }
};
TokenRange.prototype = {};
TokenRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.end_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.endpoints = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString();
          this.endpoints.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.rpc_endpoints = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = input.readString();
          this.rpc_endpoints.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.endpoint_details = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new ttypes.EndpointDetails();
          elem76.read(input);
          this.endpoint_details.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenRange.prototype.write = function(output) {
  output.writeStructBegin('TokenRange');
  if (this.start_token !== null && this.start_token !== undefined) {
    output.writeFieldBegin('start_token', Thrift.Type.STRING, 1);
    output.writeString(this.start_token);
    output.writeFieldEnd();
  }
  if (this.end_token !== null && this.end_token !== undefined) {
    output.writeFieldBegin('end_token', Thrift.Type.STRING, 2);
    output.writeString(this.end_token);
    output.writeFieldEnd();
  }
  if (this.endpoints !== null && this.endpoints !== undefined) {
    output.writeFieldBegin('endpoints', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.endpoints.length);
    for (var iter77 in this.endpoints)
    {
      if (this.endpoints.hasOwnProperty(iter77))
      {
        iter77 = this.endpoints[iter77];
        output.writeString(iter77);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rpc_endpoints !== null && this.rpc_endpoints !== undefined) {
    output.writeFieldBegin('rpc_endpoints', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.rpc_endpoints.length);
    for (var iter78 in this.rpc_endpoints)
    {
      if (this.rpc_endpoints.hasOwnProperty(iter78))
      {
        iter78 = this.rpc_endpoints[iter78];
        output.writeString(iter78);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.endpoint_details !== null && this.endpoint_details !== undefined) {
    output.writeFieldBegin('endpoint_details', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.endpoint_details.length);
    for (var iter79 in this.endpoint_details)
    {
      if (this.endpoint_details.hasOwnProperty(iter79))
      {
        iter79 = this.endpoint_details[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationRequest = module.exports.AuthenticationRequest = function(args) {
  this.credentials = null;
  if (args) {
    if (args.credentials !== undefined) {
      this.credentials = args.credentials;
    }
  }
};
AuthenticationRequest.prototype = {};
AuthenticationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size80 = 0;
        var _rtmp384;
        this.credentials = {};
        var _ktype81 = 0;
        var _vtype82 = 0;
        _rtmp384 = input.readMapBegin();
        _ktype81 = _rtmp384.ktype;
        _vtype82 = _rtmp384.vtype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var key86 = null;
          var val87 = null;
          key86 = input.readString();
          val87 = input.readString();
          this.credentials[key86] = val87;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationRequest.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationRequest');
  if (this.credentials !== null && this.credentials !== undefined) {
    output.writeFieldBegin('credentials', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.credentials));
    for (var kiter88 in this.credentials)
    {
      if (this.credentials.hasOwnProperty(kiter88))
      {
        var viter89 = this.credentials[kiter88];
        output.writeString(kiter88);
        output.writeString(viter89);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnDef = module.exports.ColumnDef = function(args) {
  this.name = null;
  this.validation_class = null;
  this.index_type = null;
  this.index_name = null;
  this.index_options = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.validation_class !== undefined) {
      this.validation_class = args.validation_class;
    }
    if (args.index_type !== undefined) {
      this.index_type = args.index_type;
    }
    if (args.index_name !== undefined) {
      this.index_name = args.index_name;
    }
    if (args.index_options !== undefined) {
      this.index_options = args.index_options;
    }
  }
};
ColumnDef.prototype = {};
ColumnDef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.validation_class = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.index_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.index_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size90 = 0;
        var _rtmp394;
        this.index_options = {};
        var _ktype91 = 0;
        var _vtype92 = 0;
        _rtmp394 = input.readMapBegin();
        _ktype91 = _rtmp394.ktype;
        _vtype92 = _rtmp394.vtype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var key96 = null;
          var val97 = null;
          key96 = input.readString();
          val97 = input.readString();
          this.index_options[key96] = val97;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnDef.prototype.write = function(output) {
  output.writeStructBegin('ColumnDef');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.validation_class !== null && this.validation_class !== undefined) {
    output.writeFieldBegin('validation_class', Thrift.Type.STRING, 2);
    output.writeString(this.validation_class);
    output.writeFieldEnd();
  }
  if (this.index_type !== null && this.index_type !== undefined) {
    output.writeFieldBegin('index_type', Thrift.Type.I32, 3);
    output.writeI32(this.index_type);
    output.writeFieldEnd();
  }
  if (this.index_name !== null && this.index_name !== undefined) {
    output.writeFieldBegin('index_name', Thrift.Type.STRING, 4);
    output.writeString(this.index_name);
    output.writeFieldEnd();
  }
  if (this.index_options !== null && this.index_options !== undefined) {
    output.writeFieldBegin('index_options', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.index_options));
    for (var kiter98 in this.index_options)
    {
      if (this.index_options.hasOwnProperty(kiter98))
      {
        var viter99 = this.index_options[kiter98];
        output.writeString(kiter98);
        output.writeString(viter99);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TriggerDef = module.exports.TriggerDef = function(args) {
  this.name = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
TriggerDef.prototype = {};
TriggerDef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size100 = 0;
        var _rtmp3104;
        this.options = {};
        var _ktype101 = 0;
        var _vtype102 = 0;
        _rtmp3104 = input.readMapBegin();
        _ktype101 = _rtmp3104.ktype;
        _vtype102 = _rtmp3104.vtype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var key106 = null;
          var val107 = null;
          key106 = input.readString();
          val107 = input.readString();
          this.options[key106] = val107;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TriggerDef.prototype.write = function(output) {
  output.writeStructBegin('TriggerDef');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.options));
    for (var kiter108 in this.options)
    {
      if (this.options.hasOwnProperty(kiter108))
      {
        var viter109 = this.options[kiter108];
        output.writeString(kiter108);
        output.writeString(viter109);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CfDef = module.exports.CfDef = function(args) {
  this.keyspace = null;
  this.name = null;
  this.column_type = 'Standard';
  this.comparator_type = 'BytesType';
  this.subcomparator_type = null;
  this.comment = null;
  this.read_repair_chance = null;
  this.column_metadata = null;
  this.gc_grace_seconds = null;
  this.default_validation_class = null;
  this.id = null;
  this.min_compaction_threshold = null;
  this.max_compaction_threshold = null;
  this.replicate_on_write = null;
  this.key_validation_class = null;
  this.key_alias = null;
  this.compaction_strategy = null;
  this.compaction_strategy_options = null;
  this.compression_options = null;
  this.bloom_filter_fp_chance = null;
  this.caching = 'keys_only';
  this.dclocal_read_repair_chance = 0;
  this.populate_io_cache_on_flush = null;
  this.memtable_flush_period_in_ms = null;
  this.default_time_to_live = null;
  this.index_interval = null;
  this.speculative_retry = 'NONE';
  this.triggers = null;
  this.row_cache_size = null;
  this.key_cache_size = null;
  this.row_cache_save_period_in_seconds = null;
  this.key_cache_save_period_in_seconds = null;
  this.memtable_flush_after_mins = null;
  this.memtable_throughput_in_mb = null;
  this.memtable_operations_in_millions = null;
  this.merge_shards_chance = null;
  this.row_cache_provider = null;
  this.row_cache_keys_to_save = null;
  if (args) {
    if (args.keyspace !== undefined) {
      this.keyspace = args.keyspace;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.column_type !== undefined) {
      this.column_type = args.column_type;
    }
    if (args.comparator_type !== undefined) {
      this.comparator_type = args.comparator_type;
    }
    if (args.subcomparator_type !== undefined) {
      this.subcomparator_type = args.subcomparator_type;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
    if (args.read_repair_chance !== undefined) {
      this.read_repair_chance = args.read_repair_chance;
    }
    if (args.column_metadata !== undefined) {
      this.column_metadata = args.column_metadata;
    }
    if (args.gc_grace_seconds !== undefined) {
      this.gc_grace_seconds = args.gc_grace_seconds;
    }
    if (args.default_validation_class !== undefined) {
      this.default_validation_class = args.default_validation_class;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.min_compaction_threshold !== undefined) {
      this.min_compaction_threshold = args.min_compaction_threshold;
    }
    if (args.max_compaction_threshold !== undefined) {
      this.max_compaction_threshold = args.max_compaction_threshold;
    }
    if (args.replicate_on_write !== undefined) {
      this.replicate_on_write = args.replicate_on_write;
    }
    if (args.key_validation_class !== undefined) {
      this.key_validation_class = args.key_validation_class;
    }
    if (args.key_alias !== undefined) {
      this.key_alias = args.key_alias;
    }
    if (args.compaction_strategy !== undefined) {
      this.compaction_strategy = args.compaction_strategy;
    }
    if (args.compaction_strategy_options !== undefined) {
      this.compaction_strategy_options = args.compaction_strategy_options;
    }
    if (args.compression_options !== undefined) {
      this.compression_options = args.compression_options;
    }
    if (args.bloom_filter_fp_chance !== undefined) {
      this.bloom_filter_fp_chance = args.bloom_filter_fp_chance;
    }
    if (args.caching !== undefined) {
      this.caching = args.caching;
    }
    if (args.dclocal_read_repair_chance !== undefined) {
      this.dclocal_read_repair_chance = args.dclocal_read_repair_chance;
    }
    if (args.populate_io_cache_on_flush !== undefined) {
      this.populate_io_cache_on_flush = args.populate_io_cache_on_flush;
    }
    if (args.memtable_flush_period_in_ms !== undefined) {
      this.memtable_flush_period_in_ms = args.memtable_flush_period_in_ms;
    }
    if (args.default_time_to_live !== undefined) {
      this.default_time_to_live = args.default_time_to_live;
    }
    if (args.index_interval !== undefined) {
      this.index_interval = args.index_interval;
    }
    if (args.speculative_retry !== undefined) {
      this.speculative_retry = args.speculative_retry;
    }
    if (args.triggers !== undefined) {
      this.triggers = args.triggers;
    }
    if (args.row_cache_size !== undefined) {
      this.row_cache_size = args.row_cache_size;
    }
    if (args.key_cache_size !== undefined) {
      this.key_cache_size = args.key_cache_size;
    }
    if (args.row_cache_save_period_in_seconds !== undefined) {
      this.row_cache_save_period_in_seconds = args.row_cache_save_period_in_seconds;
    }
    if (args.key_cache_save_period_in_seconds !== undefined) {
      this.key_cache_save_period_in_seconds = args.key_cache_save_period_in_seconds;
    }
    if (args.memtable_flush_after_mins !== undefined) {
      this.memtable_flush_after_mins = args.memtable_flush_after_mins;
    }
    if (args.memtable_throughput_in_mb !== undefined) {
      this.memtable_throughput_in_mb = args.memtable_throughput_in_mb;
    }
    if (args.memtable_operations_in_millions !== undefined) {
      this.memtable_operations_in_millions = args.memtable_operations_in_millions;
    }
    if (args.merge_shards_chance !== undefined) {
      this.merge_shards_chance = args.merge_shards_chance;
    }
    if (args.row_cache_provider !== undefined) {
      this.row_cache_provider = args.row_cache_provider;
    }
    if (args.row_cache_keys_to_save !== undefined) {
      this.row_cache_keys_to_save = args.row_cache_keys_to_save;
    }
  }
};
CfDef.prototype = {};
CfDef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keyspace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.comparator_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.subcomparator_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.read_repair_chance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size110 = 0;
        var _rtmp3114;
        this.column_metadata = [];
        var _etype113 = 0;
        _rtmp3114 = input.readListBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = new ttypes.ColumnDef();
          elem116.read(input);
          this.column_metadata.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.gc_grace_seconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.default_validation_class = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.min_compaction_threshold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.max_compaction_threshold = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.replicate_on_write = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.key_validation_class = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.key_alias = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRING) {
        this.compaction_strategy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.MAP) {
        var _size117 = 0;
        var _rtmp3121;
        this.compaction_strategy_options = {};
        var _ktype118 = 0;
        var _vtype119 = 0;
        _rtmp3121 = input.readMapBegin();
        _ktype118 = _rtmp3121.ktype;
        _vtype119 = _rtmp3121.vtype;
        _size117 = _rtmp3121.size;
        for (var _i122 = 0; _i122 < _size117; ++_i122)
        {
          var key123 = null;
          var val124 = null;
          key123 = input.readString();
          val124 = input.readString();
          this.compaction_strategy_options[key123] = val124;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.MAP) {
        var _size125 = 0;
        var _rtmp3129;
        this.compression_options = {};
        var _ktype126 = 0;
        var _vtype127 = 0;
        _rtmp3129 = input.readMapBegin();
        _ktype126 = _rtmp3129.ktype;
        _vtype127 = _rtmp3129.vtype;
        _size125 = _rtmp3129.size;
        for (var _i130 = 0; _i130 < _size125; ++_i130)
        {
          var key131 = null;
          var val132 = null;
          key131 = input.readString();
          val132 = input.readString();
          this.compression_options[key131] = val132;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.DOUBLE) {
        this.bloom_filter_fp_chance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRING) {
        this.caching = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dclocal_read_repair_chance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.BOOL) {
        this.populate_io_cache_on_flush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.I32) {
        this.memtable_flush_period_in_ms = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I32) {
        this.default_time_to_live = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I32) {
        this.index_interval = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRING) {
        this.speculative_retry = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.LIST) {
        var _size133 = 0;
        var _rtmp3137;
        this.triggers = [];
        var _etype136 = 0;
        _rtmp3137 = input.readListBegin();
        _etype136 = _rtmp3137.etype;
        _size133 = _rtmp3137.size;
        for (var _i138 = 0; _i138 < _size133; ++_i138)
        {
          var elem139 = null;
          elem139 = new ttypes.TriggerDef();
          elem139.read(input);
          this.triggers.push(elem139);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.row_cache_size = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.key_cache_size = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.row_cache_save_period_in_seconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.key_cache_save_period_in_seconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.memtable_flush_after_mins = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.memtable_throughput_in_mb = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.DOUBLE) {
        this.memtable_operations_in_millions = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.DOUBLE) {
        this.merge_shards_chance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.row_cache_provider = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.row_cache_keys_to_save = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CfDef.prototype.write = function(output) {
  output.writeStructBegin('CfDef');
  if (this.keyspace !== null && this.keyspace !== undefined) {
    output.writeFieldBegin('keyspace', Thrift.Type.STRING, 1);
    output.writeString(this.keyspace);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.column_type !== null && this.column_type !== undefined) {
    output.writeFieldBegin('column_type', Thrift.Type.STRING, 3);
    output.writeString(this.column_type);
    output.writeFieldEnd();
  }
  if (this.comparator_type !== null && this.comparator_type !== undefined) {
    output.writeFieldBegin('comparator_type', Thrift.Type.STRING, 5);
    output.writeString(this.comparator_type);
    output.writeFieldEnd();
  }
  if (this.subcomparator_type !== null && this.subcomparator_type !== undefined) {
    output.writeFieldBegin('subcomparator_type', Thrift.Type.STRING, 6);
    output.writeString(this.subcomparator_type);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 8);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.read_repair_chance !== null && this.read_repair_chance !== undefined) {
    output.writeFieldBegin('read_repair_chance', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.read_repair_chance);
    output.writeFieldEnd();
  }
  if (this.column_metadata !== null && this.column_metadata !== undefined) {
    output.writeFieldBegin('column_metadata', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.column_metadata.length);
    for (var iter140 in this.column_metadata)
    {
      if (this.column_metadata.hasOwnProperty(iter140))
      {
        iter140 = this.column_metadata[iter140];
        iter140.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.gc_grace_seconds !== null && this.gc_grace_seconds !== undefined) {
    output.writeFieldBegin('gc_grace_seconds', Thrift.Type.I32, 14);
    output.writeI32(this.gc_grace_seconds);
    output.writeFieldEnd();
  }
  if (this.default_validation_class !== null && this.default_validation_class !== undefined) {
    output.writeFieldBegin('default_validation_class', Thrift.Type.STRING, 15);
    output.writeString(this.default_validation_class);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 16);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.min_compaction_threshold !== null && this.min_compaction_threshold !== undefined) {
    output.writeFieldBegin('min_compaction_threshold', Thrift.Type.I32, 17);
    output.writeI32(this.min_compaction_threshold);
    output.writeFieldEnd();
  }
  if (this.max_compaction_threshold !== null && this.max_compaction_threshold !== undefined) {
    output.writeFieldBegin('max_compaction_threshold', Thrift.Type.I32, 18);
    output.writeI32(this.max_compaction_threshold);
    output.writeFieldEnd();
  }
  if (this.replicate_on_write !== null && this.replicate_on_write !== undefined) {
    output.writeFieldBegin('replicate_on_write', Thrift.Type.BOOL, 24);
    output.writeBool(this.replicate_on_write);
    output.writeFieldEnd();
  }
  if (this.key_validation_class !== null && this.key_validation_class !== undefined) {
    output.writeFieldBegin('key_validation_class', Thrift.Type.STRING, 26);
    output.writeString(this.key_validation_class);
    output.writeFieldEnd();
  }
  if (this.key_alias !== null && this.key_alias !== undefined) {
    output.writeFieldBegin('key_alias', Thrift.Type.STRING, 28);
    output.writeString(this.key_alias);
    output.writeFieldEnd();
  }
  if (this.compaction_strategy !== null && this.compaction_strategy !== undefined) {
    output.writeFieldBegin('compaction_strategy', Thrift.Type.STRING, 29);
    output.writeString(this.compaction_strategy);
    output.writeFieldEnd();
  }
  if (this.compaction_strategy_options !== null && this.compaction_strategy_options !== undefined) {
    output.writeFieldBegin('compaction_strategy_options', Thrift.Type.MAP, 30);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.compaction_strategy_options));
    for (var kiter141 in this.compaction_strategy_options)
    {
      if (this.compaction_strategy_options.hasOwnProperty(kiter141))
      {
        var viter142 = this.compaction_strategy_options[kiter141];
        output.writeString(kiter141);
        output.writeString(viter142);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.compression_options !== null && this.compression_options !== undefined) {
    output.writeFieldBegin('compression_options', Thrift.Type.MAP, 32);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.compression_options));
    for (var kiter143 in this.compression_options)
    {
      if (this.compression_options.hasOwnProperty(kiter143))
      {
        var viter144 = this.compression_options[kiter143];
        output.writeString(kiter143);
        output.writeString(viter144);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.bloom_filter_fp_chance !== null && this.bloom_filter_fp_chance !== undefined) {
    output.writeFieldBegin('bloom_filter_fp_chance', Thrift.Type.DOUBLE, 33);
    output.writeDouble(this.bloom_filter_fp_chance);
    output.writeFieldEnd();
  }
  if (this.caching !== null && this.caching !== undefined) {
    output.writeFieldBegin('caching', Thrift.Type.STRING, 34);
    output.writeString(this.caching);
    output.writeFieldEnd();
  }
  if (this.dclocal_read_repair_chance !== null && this.dclocal_read_repair_chance !== undefined) {
    output.writeFieldBegin('dclocal_read_repair_chance', Thrift.Type.DOUBLE, 37);
    output.writeDouble(this.dclocal_read_repair_chance);
    output.writeFieldEnd();
  }
  if (this.populate_io_cache_on_flush !== null && this.populate_io_cache_on_flush !== undefined) {
    output.writeFieldBegin('populate_io_cache_on_flush', Thrift.Type.BOOL, 38);
    output.writeBool(this.populate_io_cache_on_flush);
    output.writeFieldEnd();
  }
  if (this.memtable_flush_period_in_ms !== null && this.memtable_flush_period_in_ms !== undefined) {
    output.writeFieldBegin('memtable_flush_period_in_ms', Thrift.Type.I32, 39);
    output.writeI32(this.memtable_flush_period_in_ms);
    output.writeFieldEnd();
  }
  if (this.default_time_to_live !== null && this.default_time_to_live !== undefined) {
    output.writeFieldBegin('default_time_to_live', Thrift.Type.I32, 40);
    output.writeI32(this.default_time_to_live);
    output.writeFieldEnd();
  }
  if (this.index_interval !== null && this.index_interval !== undefined) {
    output.writeFieldBegin('index_interval', Thrift.Type.I32, 41);
    output.writeI32(this.index_interval);
    output.writeFieldEnd();
  }
  if (this.speculative_retry !== null && this.speculative_retry !== undefined) {
    output.writeFieldBegin('speculative_retry', Thrift.Type.STRING, 42);
    output.writeString(this.speculative_retry);
    output.writeFieldEnd();
  }
  if (this.triggers !== null && this.triggers !== undefined) {
    output.writeFieldBegin('triggers', Thrift.Type.LIST, 43);
    output.writeListBegin(Thrift.Type.STRUCT, this.triggers.length);
    for (var iter145 in this.triggers)
    {
      if (this.triggers.hasOwnProperty(iter145))
      {
        iter145 = this.triggers[iter145];
        iter145.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.row_cache_size !== null && this.row_cache_size !== undefined) {
    output.writeFieldBegin('row_cache_size', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.row_cache_size);
    output.writeFieldEnd();
  }
  if (this.key_cache_size !== null && this.key_cache_size !== undefined) {
    output.writeFieldBegin('key_cache_size', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.key_cache_size);
    output.writeFieldEnd();
  }
  if (this.row_cache_save_period_in_seconds !== null && this.row_cache_save_period_in_seconds !== undefined) {
    output.writeFieldBegin('row_cache_save_period_in_seconds', Thrift.Type.I32, 19);
    output.writeI32(this.row_cache_save_period_in_seconds);
    output.writeFieldEnd();
  }
  if (this.key_cache_save_period_in_seconds !== null && this.key_cache_save_period_in_seconds !== undefined) {
    output.writeFieldBegin('key_cache_save_period_in_seconds', Thrift.Type.I32, 20);
    output.writeI32(this.key_cache_save_period_in_seconds);
    output.writeFieldEnd();
  }
  if (this.memtable_flush_after_mins !== null && this.memtable_flush_after_mins !== undefined) {
    output.writeFieldBegin('memtable_flush_after_mins', Thrift.Type.I32, 21);
    output.writeI32(this.memtable_flush_after_mins);
    output.writeFieldEnd();
  }
  if (this.memtable_throughput_in_mb !== null && this.memtable_throughput_in_mb !== undefined) {
    output.writeFieldBegin('memtable_throughput_in_mb', Thrift.Type.I32, 22);
    output.writeI32(this.memtable_throughput_in_mb);
    output.writeFieldEnd();
  }
  if (this.memtable_operations_in_millions !== null && this.memtable_operations_in_millions !== undefined) {
    output.writeFieldBegin('memtable_operations_in_millions', Thrift.Type.DOUBLE, 23);
    output.writeDouble(this.memtable_operations_in_millions);
    output.writeFieldEnd();
  }
  if (this.merge_shards_chance !== null && this.merge_shards_chance !== undefined) {
    output.writeFieldBegin('merge_shards_chance', Thrift.Type.DOUBLE, 25);
    output.writeDouble(this.merge_shards_chance);
    output.writeFieldEnd();
  }
  if (this.row_cache_provider !== null && this.row_cache_provider !== undefined) {
    output.writeFieldBegin('row_cache_provider', Thrift.Type.STRING, 27);
    output.writeString(this.row_cache_provider);
    output.writeFieldEnd();
  }
  if (this.row_cache_keys_to_save !== null && this.row_cache_keys_to_save !== undefined) {
    output.writeFieldBegin('row_cache_keys_to_save', Thrift.Type.I32, 31);
    output.writeI32(this.row_cache_keys_to_save);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KsDef = module.exports.KsDef = function(args) {
  this.name = null;
  this.strategy_class = null;
  this.strategy_options = null;
  this.replication_factor = null;
  this.cf_defs = null;
  this.durable_writes = true;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.strategy_class !== undefined) {
      this.strategy_class = args.strategy_class;
    }
    if (args.strategy_options !== undefined) {
      this.strategy_options = args.strategy_options;
    }
    if (args.replication_factor !== undefined) {
      this.replication_factor = args.replication_factor;
    }
    if (args.cf_defs !== undefined) {
      this.cf_defs = args.cf_defs;
    }
    if (args.durable_writes !== undefined) {
      this.durable_writes = args.durable_writes;
    }
  }
};
KsDef.prototype = {};
KsDef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.strategy_class = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size146 = 0;
        var _rtmp3150;
        this.strategy_options = {};
        var _ktype147 = 0;
        var _vtype148 = 0;
        _rtmp3150 = input.readMapBegin();
        _ktype147 = _rtmp3150.ktype;
        _vtype148 = _rtmp3150.vtype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var key152 = null;
          var val153 = null;
          key152 = input.readString();
          val153 = input.readString();
          this.strategy_options[key152] = val153;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.replication_factor = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size154 = 0;
        var _rtmp3158;
        this.cf_defs = [];
        var _etype157 = 0;
        _rtmp3158 = input.readListBegin();
        _etype157 = _rtmp3158.etype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var elem160 = null;
          elem160 = new ttypes.CfDef();
          elem160.read(input);
          this.cf_defs.push(elem160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.durable_writes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KsDef.prototype.write = function(output) {
  output.writeStructBegin('KsDef');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.strategy_class !== null && this.strategy_class !== undefined) {
    output.writeFieldBegin('strategy_class', Thrift.Type.STRING, 2);
    output.writeString(this.strategy_class);
    output.writeFieldEnd();
  }
  if (this.strategy_options !== null && this.strategy_options !== undefined) {
    output.writeFieldBegin('strategy_options', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.strategy_options));
    for (var kiter161 in this.strategy_options)
    {
      if (this.strategy_options.hasOwnProperty(kiter161))
      {
        var viter162 = this.strategy_options[kiter161];
        output.writeString(kiter161);
        output.writeString(viter162);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.replication_factor !== null && this.replication_factor !== undefined) {
    output.writeFieldBegin('replication_factor', Thrift.Type.I32, 4);
    output.writeI32(this.replication_factor);
    output.writeFieldEnd();
  }
  if (this.cf_defs !== null && this.cf_defs !== undefined) {
    output.writeFieldBegin('cf_defs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.cf_defs.length);
    for (var iter163 in this.cf_defs)
    {
      if (this.cf_defs.hasOwnProperty(iter163))
      {
        iter163 = this.cf_defs[iter163];
        iter163.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.durable_writes !== null && this.durable_writes !== undefined) {
    output.writeFieldBegin('durable_writes', Thrift.Type.BOOL, 6);
    output.writeBool(this.durable_writes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CqlRow = module.exports.CqlRow = function(args) {
  this.key = null;
  this.columns = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
CqlRow.prototype = {};
CqlRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.columns = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = new ttypes.Column();
          elem170.read(input);
          this.columns.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CqlRow.prototype.write = function(output) {
  output.writeStructBegin('CqlRow');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter171 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter171))
      {
        iter171 = this.columns[iter171];
        iter171.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CqlMetadata = module.exports.CqlMetadata = function(args) {
  this.name_types = null;
  this.value_types = null;
  this.default_name_type = null;
  this.default_value_type = null;
  if (args) {
    if (args.name_types !== undefined) {
      this.name_types = args.name_types;
    }
    if (args.value_types !== undefined) {
      this.value_types = args.value_types;
    }
    if (args.default_name_type !== undefined) {
      this.default_name_type = args.default_name_type;
    }
    if (args.default_value_type !== undefined) {
      this.default_value_type = args.default_value_type;
    }
  }
};
CqlMetadata.prototype = {};
CqlMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size172 = 0;
        var _rtmp3176;
        this.name_types = {};
        var _ktype173 = 0;
        var _vtype174 = 0;
        _rtmp3176 = input.readMapBegin();
        _ktype173 = _rtmp3176.ktype;
        _vtype174 = _rtmp3176.vtype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var key178 = null;
          var val179 = null;
          key178 = input.readBinary();
          val179 = input.readString();
          this.name_types[key178] = val179;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size180 = 0;
        var _rtmp3184;
        this.value_types = {};
        var _ktype181 = 0;
        var _vtype182 = 0;
        _rtmp3184 = input.readMapBegin();
        _ktype181 = _rtmp3184.ktype;
        _vtype182 = _rtmp3184.vtype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          var key186 = null;
          var val187 = null;
          key186 = input.readBinary();
          val187 = input.readString();
          this.value_types[key186] = val187;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.default_name_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.default_value_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CqlMetadata.prototype.write = function(output) {
  output.writeStructBegin('CqlMetadata');
  if (this.name_types !== null && this.name_types !== undefined) {
    output.writeFieldBegin('name_types', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.name_types));
    for (var kiter188 in this.name_types)
    {
      if (this.name_types.hasOwnProperty(kiter188))
      {
        var viter189 = this.name_types[kiter188];
        output.writeString(kiter188);
        output.writeString(viter189);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.value_types !== null && this.value_types !== undefined) {
    output.writeFieldBegin('value_types', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.value_types));
    for (var kiter190 in this.value_types)
    {
      if (this.value_types.hasOwnProperty(kiter190))
      {
        var viter191 = this.value_types[kiter190];
        output.writeString(kiter190);
        output.writeString(viter191);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.default_name_type !== null && this.default_name_type !== undefined) {
    output.writeFieldBegin('default_name_type', Thrift.Type.STRING, 3);
    output.writeString(this.default_name_type);
    output.writeFieldEnd();
  }
  if (this.default_value_type !== null && this.default_value_type !== undefined) {
    output.writeFieldBegin('default_value_type', Thrift.Type.STRING, 4);
    output.writeString(this.default_value_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CqlResult = module.exports.CqlResult = function(args) {
  this.type = null;
  this.rows = null;
  this.num = null;
  this.schema = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.num !== undefined) {
      this.num = args.num;
    }
    if (args.schema !== undefined) {
      this.schema = args.schema;
    }
  }
};
CqlResult.prototype = {};
CqlResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.rows = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = new ttypes.CqlRow();
          elem198.read(input);
          this.rows.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.num = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.CqlMetadata();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CqlResult.prototype.write = function(output) {
  output.writeStructBegin('CqlResult');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter199 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter199))
      {
        iter199 = this.rows[iter199];
        iter199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.num !== null && this.num !== undefined) {
    output.writeFieldBegin('num', Thrift.Type.I32, 3);
    output.writeI32(this.num);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 4);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CqlPreparedResult = module.exports.CqlPreparedResult = function(args) {
  this.itemId = null;
  this.count = null;
  this.variable_types = null;
  this.variable_names = null;
  if (args) {
    if (args.itemId !== undefined) {
      this.itemId = args.itemId;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
    if (args.variable_types !== undefined) {
      this.variable_types = args.variable_types;
    }
    if (args.variable_names !== undefined) {
      this.variable_names = args.variable_names;
    }
  }
};
CqlPreparedResult.prototype = {};
CqlPreparedResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.itemId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size200 = 0;
        var _rtmp3204;
        this.variable_types = [];
        var _etype203 = 0;
        _rtmp3204 = input.readListBegin();
        _etype203 = _rtmp3204.etype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var elem206 = null;
          elem206 = input.readString();
          this.variable_types.push(elem206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size207 = 0;
        var _rtmp3211;
        this.variable_names = [];
        var _etype210 = 0;
        _rtmp3211 = input.readListBegin();
        _etype210 = _rtmp3211.etype;
        _size207 = _rtmp3211.size;
        for (var _i212 = 0; _i212 < _size207; ++_i212)
        {
          var elem213 = null;
          elem213 = input.readString();
          this.variable_names.push(elem213);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CqlPreparedResult.prototype.write = function(output) {
  output.writeStructBegin('CqlPreparedResult');
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.I32, 1);
    output.writeI32(this.itemId);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.variable_types !== null && this.variable_types !== undefined) {
    output.writeFieldBegin('variable_types', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.variable_types.length);
    for (var iter214 in this.variable_types)
    {
      if (this.variable_types.hasOwnProperty(iter214))
      {
        iter214 = this.variable_types[iter214];
        output.writeString(iter214);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.variable_names !== null && this.variable_names !== undefined) {
    output.writeFieldBegin('variable_names', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.variable_names.length);
    for (var iter215 in this.variable_names)
    {
      if (this.variable_names.hasOwnProperty(iter215))
      {
        iter215 = this.variable_names[iter215];
        output.writeString(iter215);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CfSplit = module.exports.CfSplit = function(args) {
  this.start_token = null;
  this.end_token = null;
  this.row_count = null;
  if (args) {
    if (args.start_token !== undefined) {
      this.start_token = args.start_token;
    }
    if (args.end_token !== undefined) {
      this.end_token = args.end_token;
    }
    if (args.row_count !== undefined) {
      this.row_count = args.row_count;
    }
  }
};
CfSplit.prototype = {};
CfSplit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.end_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.row_count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CfSplit.prototype.write = function(output) {
  output.writeStructBegin('CfSplit');
  if (this.start_token !== null && this.start_token !== undefined) {
    output.writeFieldBegin('start_token', Thrift.Type.STRING, 1);
    output.writeString(this.start_token);
    output.writeFieldEnd();
  }
  if (this.end_token !== null && this.end_token !== undefined) {
    output.writeFieldBegin('end_token', Thrift.Type.STRING, 2);
    output.writeString(this.end_token);
    output.writeFieldEnd();
  }
  if (this.row_count !== null && this.row_count !== undefined) {
    output.writeFieldBegin('row_count', Thrift.Type.I64, 3);
    output.writeI64(this.row_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '19.38.0';
